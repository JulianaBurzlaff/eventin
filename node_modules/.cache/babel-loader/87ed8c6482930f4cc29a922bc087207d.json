{"ast":null,"code":"import * as React from 'react';\n\nvar isCheckBoxInput = element => element.type === 'checkbox';\n\nvar isNullOrUndefined = value => value == null;\n\nconst isObjectType = value => typeof value === 'object';\n\nvar isObject = value => !isNullOrUndefined(value) && !Array.isArray(value) && isObjectType(value) && !(value instanceof Date);\n\nvar getControllerValue = event => isObject(event) && event.target ? isCheckBoxInput(event.target) ? event.target.checked : event.target.value : event;\n\nvar getNodeParentName = name => name.substring(0, name.search(/.\\d/)) || name;\n\nvar isNameInFieldArray = (names, name) => [...names].some(current => getNodeParentName(name) === current);\n\nvar compact = value => value.filter(Boolean);\n\nvar isUndefined = val => val === undefined;\n\nvar get = (obj, path, defaultValue) => {\n  if (isObject(obj) && path) {\n    const result = compact(path.split(/[,[\\].]+?/)).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], obj);\n    return isUndefined(result) || result === obj ? isUndefined(obj[path]) ? defaultValue : obj[path] : result;\n  }\n\n  return undefined;\n};\n\nconst EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change'\n};\nconst VALIDATION_MODE = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all'\n};\nconst INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate'\n};\n\nvar omit = (source, key) => {\n  const copy = Object.assign({}, source);\n  delete copy[key];\n  return copy;\n};\n\nconst FormContext = React.createContext(null);\nFormContext.displayName = 'RHFContext';\n\nconst useFormContext = () => React.useContext(FormContext);\n\nconst FormProvider = props => React.createElement(FormContext.Provider, {\n  value: omit(props, 'children')\n}, props.children);\n\nvar getProxyFormState = (isProxyEnabled, formState, readFormStateRef, localReadFormStateRef, isRoot = true) => isProxyEnabled ? new Proxy(formState, {\n  get: (obj, prop) => {\n    if (prop in obj) {\n      if (readFormStateRef.current[prop] !== VALIDATION_MODE.all) {\n        readFormStateRef.current[prop] = isRoot ? VALIDATION_MODE.all : true;\n      }\n\n      localReadFormStateRef && (localReadFormStateRef.current[prop] = true);\n      return obj[prop];\n    }\n\n    return undefined;\n  }\n}) : formState;\n\nvar isEmptyObject = value => isObject(value) && !Object.keys(value).length;\n\nvar shouldRenderFormState = (formStateData, readFormStateRef, isRoot) => {\n  const formState = omit(formStateData, 'name');\n  return isEmptyObject(formState) || Object.keys(formState).length >= Object.keys(readFormStateRef).length || Object.keys(formState).find(key => readFormStateRef[key] === (isRoot ? VALIDATION_MODE.all : true));\n};\n\nvar convertToArrayPayload = value => Array.isArray(value) ? value : [value];\n\nvar isWeb = typeof window !== 'undefined' && typeof window.HTMLElement !== 'undefined' && typeof document !== 'undefined';\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== 'undefined';\n\nfunction useFormState(props) {\n  const {\n    control,\n    name\n  } = props || {};\n  const methods = useFormContext();\n  const {\n    formStateRef,\n    subjectsRef,\n    readFormStateRef\n  } = control || methods.control;\n  const nameRef = React.useRef(name);\n  nameRef.current = name;\n  const [formState, updateFormState] = React.useState(formStateRef.current);\n  const readFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false\n  });\n  React.useEffect(() => {\n    const formStateSubscription = subjectsRef.current.state.subscribe({\n      next: formState => (!nameRef.current || !formState.name || convertToArrayPayload(nameRef.current).includes(formState.name)) && shouldRenderFormState(formState, readFormState.current) && updateFormState(Object.assign(Object.assign({}, formStateRef.current), formState))\n    });\n    return () => formStateSubscription.unsubscribe();\n  }, []);\n  return getProxyFormState(isProxyEnabled, formState, readFormStateRef, readFormState, false);\n}\n\nfunction useController({\n  name,\n  rules,\n  defaultValue,\n  control,\n  shouldUnregister\n}) {\n  const methods = useFormContext();\n  const {\n    defaultValuesRef,\n    register,\n    fieldsRef,\n    unregister,\n    namesRef,\n    subjectsRef,\n    shouldUnmount,\n    inFieldArrayActionRef\n  } = control || methods.control;\n  const isFieldArray = isNameInFieldArray(namesRef.current.array, name);\n  const field = get(fieldsRef.current, name);\n  const [value, setInputStateValue] = React.useState(isFieldArray || !field || !field._f ? isFieldArray || isUndefined(get(defaultValuesRef.current, name)) ? defaultValue : get(defaultValuesRef.current, name) : field._f.value);\n  const {\n    onChange,\n    onBlur,\n    ref\n  } = register(name, Object.assign(Object.assign({}, rules), {\n    value\n  }));\n  const formState = useFormState({\n    control: control || methods.control,\n    name\n  });\n  React.useEffect(() => {\n    const controllerSubscription = subjectsRef.current.control.subscribe({\n      next: data => (!data.name || name === data.name) && setInputStateValue(get(data.values, name))\n    });\n    return () => {\n      controllerSubscription.unsubscribe();\n      const shouldUnmountField = shouldUnmount || shouldUnregister;\n\n      if (isFieldArray ? shouldUnmountField && !inFieldArrayActionRef.current : shouldUnmountField) {\n        unregister(name);\n      } else {\n        const field = get(fieldsRef.current, name);\n\n        if (field && field._f) {\n          field._f.mount = false;\n        }\n      }\n    };\n  }, [name]);\n  return {\n    field: {\n      onChange: event => {\n        const value = getControllerValue(event);\n        setInputStateValue(value);\n        onChange({\n          target: {\n            value,\n            name: name\n          },\n          type: EVENTS.CHANGE\n        });\n      },\n      onBlur: () => {\n        onBlur({\n          target: {\n            name: name\n          },\n          type: EVENTS.BLUR\n        });\n      },\n      name,\n      value,\n      ref: elm => elm && ref({\n        focus: () => elm.focus && elm.focus()\n      })\n    },\n    formState,\n    fieldState: {\n      invalid: !!get(formState.errors, name),\n      isDirty: !!get(formState.dirtyFields, name),\n      isTouched: !!get(formState.touchedFields, name),\n      error: get(formState.errors, name)\n    }\n  };\n}\n\nconst Controller = props => props.render(useController(props));\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria ? Object.assign(Object.assign({}, errors[name]), {\n  types: Object.assign(Object.assign({}, errors[name] && errors[name].types ? errors[name].types : {}), {\n    [type]: message || true\n  })\n}) : {};\n\nvar isKey = value => /^\\w*$/.test(value);\n\nvar stringToPath = input => compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n\nfunction set(object, path, value) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue = isObject(objValue) || Array.isArray(objValue) ? objValue : !isNaN(+tempPath[index + 1]) ? [] : {};\n    }\n\n    object[key] = newValue;\n    object = object[key];\n  }\n\n  return object;\n}\n\nconst focusFieldBy = (fields, callback, fieldsNames) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nconst getFieldsValues = (fieldsRef, output = {}) => {\n  for (const name in fieldsRef.current) {\n    const field = fieldsRef.current[name];\n\n    if (field && !isNullOrUndefined(output)) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n      set(output, name, _f && _f.ref ? _f.ref.disabled || _f.refs && _f.refs.every(ref => ref.disabled) ? undefined : _f.value : Array.isArray(field) ? [] : {});\n      current && getFieldsValues({\n        current\n      }, output[name]);\n    }\n  }\n\n  return output;\n};\n\nvar generateId = () => {\n  const d = typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n    return (c == 'x' ? r : r & 0x3 | 0x8).toString(16);\n  });\n};\n\nvar mapIds = (values = [], keyName) => values.map(value => Object.assign({\n  [keyName]: value && value[keyName] || generateId()\n}, value));\n\nvar isPrimitive = value => isNullOrUndefined(value) || !isObjectType(value);\n\nfunction deepEqual(object1, object2, isErrorObject) {\n  if (isPrimitive(object1) || isPrimitive(object2) || object1 instanceof Date || object2 instanceof Date) {\n    return object1 === object2;\n  }\n\n  if (!React.isValidElement(object1)) {\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n\n    if (keys1.length !== keys2.length) {\n      return false;\n    }\n\n    for (const key of keys1) {\n      const val1 = object1[key];\n\n      if (!(isErrorObject && key === 'ref')) {\n        const val2 = object2[key];\n\n        if ((isObject(val1) || Array.isArray(val1)) && (isObject(val2) || Array.isArray(val2)) ? !deepEqual(val1, val2, isErrorObject) : val1 !== val2) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction deepMerge(target, source) {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] = isObject(targetValue) && isObject(sourceValue) || Array.isArray(targetValue) && Array.isArray(sourceValue) ? deepMerge(targetValue, sourceValue) : sourceValue;\n    } catch (_a) {}\n  }\n\n  return target;\n}\n\nfunction setDirtyFields(values, defaultValues, dirtyFields, parentNode, parentName) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(values[index][key], get(defaultValues[index] || {}, key, []), dirtyFields[index][key], dirtyFields[index], key);\n      } else {\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key]) ? set(dirtyFields[index] || {}, key) : dirtyFields[index] = Object.assign(Object.assign({}, dirtyFields[index]), {\n          [key]: true\n        });\n      }\n    }\n\n    parentNode && !dirtyFields.length && delete parentNode[parentName];\n  }\n\n  return dirtyFields;\n}\n\nvar setFieldArrayDirtyFields = (values, defaultValues, dirtyFields) => deepMerge(setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)), setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)));\n\nfunction append(data, value) {\n  return [...data, ...convertToArrayPayload(value)];\n}\n\nvar fillEmptyArray = value => Array.isArray(value) ? Array(value.length).fill(undefined) : undefined;\n\nfunction insert(data, index, value) {\n  return [...data.slice(0, index), ...convertToArrayPayload(value), ...data.slice(index)];\n}\n\nvar moveArrayAt = (data, from, to) => {\n  if (Array.isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined;\n    }\n\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n\n  return [];\n};\n\nfunction prepend(data, value) {\n  return [...convertToArrayPayload(value), ...data];\n}\n\nfunction removeAtIndexes(data, indexes) {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nvar removeArrayAt = (data, index) => isUndefined(index) ? [] : removeAtIndexes(data, convertToArrayPayload(index).sort((a, b) => a - b));\n\nvar swapArrayAt = (data, indexA, indexB) => {\n  data[indexA] = [data[indexB], data[indexB] = data[indexA]][0];\n};\n\nvar isBoolean = value => typeof value === 'boolean';\n\nfunction baseGet(object, updatePath) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nfunction unset(object, path) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject = updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (currentPathsLength === index && (isObject(objectRef) && isEmptyObject(objectRef) || Array.isArray(objectRef) && !objectRef.filter(data => isObject(data) && !isEmptyObject(data) || isBoolean(data)).length)) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n\nconst useFieldArray = ({\n  control,\n  name,\n  keyName = 'id',\n  shouldUnregister\n}) => {\n  const methods = useFormContext();\n  const focusNameRef = React.useRef('');\n  const isMountedRef = React.useRef(false);\n  const {\n    getIsDirty,\n    namesRef,\n    fieldsRef,\n    defaultValuesRef,\n    formStateRef,\n    subjectsRef,\n    readFormStateRef,\n    updateIsValid,\n    fieldArrayDefaultValuesRef,\n    unregister,\n    shouldUnmount,\n    inFieldArrayActionRef,\n    register\n  } = control || methods.control;\n  const [fields, setFields] = React.useState(mapIds((get(fieldsRef.current, name) && isMountedRef.current ? get(getFieldsValues(fieldsRef), name) : get(fieldArrayDefaultValuesRef.current, getNodeParentName(name)) ? get(fieldArrayDefaultValuesRef.current, name) : get(defaultValuesRef.current, name)) || [], keyName));\n  set(fieldArrayDefaultValuesRef.current, name, [...fields]);\n  namesRef.current.array.add(name);\n\n  const omitKey = fields => fields.map((field = {}) => omit(field, keyName));\n\n  const getCurrentFieldsValues = () => {\n    const values = get(getFieldsValues(fieldsRef), name, []);\n    return mapIds(get(fieldArrayDefaultValuesRef.current, name, []).map((item, index) => Object.assign(Object.assign({}, item), values[index])), keyName);\n  };\n\n  const getFocusFieldName = (index, options) => options && !options.shouldFocus ? options.focusName || `${name}.${options.focusIndex}.` : `${name}.${index}.`;\n\n  const setFieldsAndNotify = (fieldsValues = []) => setFields(mapIds(fieldsValues, keyName));\n\n  const cleanup = ref => !compact(get(ref, name, [])).length && unset(ref, name);\n\n  const batchStateUpdate = (method, args, updatedFieldArrayValues = [], shouldSet = true) => {\n    inFieldArrayActionRef.current = true;\n\n    if (get(fieldsRef.current, name)) {\n      const output = method(get(fieldsRef.current, name), args.argA, args.argB);\n      shouldSet && set(fieldsRef.current, name, output);\n    }\n\n    if (Array.isArray(get(formStateRef.current.errors, name))) {\n      const output = method(get(formStateRef.current.errors, name), args.argA, args.argB);\n      shouldSet && set(formStateRef.current.errors, name, output);\n      cleanup(formStateRef.current.errors);\n    }\n\n    if (readFormStateRef.current.touchedFields && get(formStateRef.current.touchedFields, name)) {\n      const output = method(get(formStateRef.current.touchedFields, name), args.argA, args.argB);\n      shouldSet && set(formStateRef.current.touchedFields, name, output);\n      cleanup(formStateRef.current.touchedFields);\n    }\n\n    if (readFormStateRef.current.dirtyFields || readFormStateRef.current.isDirty) {\n      set(formStateRef.current.dirtyFields, name, setFieldArrayDirtyFields(omitKey(updatedFieldArrayValues), get(defaultValuesRef.current, name, []), get(formStateRef.current.dirtyFields, name, [])));\n      updatedFieldArrayValues && set(formStateRef.current.dirtyFields, name, setFieldArrayDirtyFields(omitKey(updatedFieldArrayValues), get(defaultValuesRef.current, name, []), get(formStateRef.current.dirtyFields, name, [])));\n      cleanup(formStateRef.current.dirtyFields);\n    }\n\n    subjectsRef.current.state.next({\n      isDirty: getIsDirty(name, omitKey(updatedFieldArrayValues)),\n      errors: formStateRef.current.errors,\n      isValid: formStateRef.current.isValid\n    });\n  };\n\n  const registerFieldArray = (values, index = 0, parentName = '') => values.forEach((appendValueItem, valueIndex) => {\n    const rootName = `${parentName || name}.${parentName ? valueIndex : index + valueIndex}`;\n    isPrimitive(appendValueItem) ? register(rootName, {\n      value: appendValueItem\n    }) : Object.entries(appendValueItem).forEach(([key, value]) => {\n      const inputName = rootName + '.' + key;\n      Array.isArray(value) ? registerFieldArray(value, valueIndex, inputName) : register(inputName, {\n        value: isPrimitive(value) ? value : Object.assign({}, value)\n      });\n    });\n  });\n\n  const append$1 = (value, options) => {\n    const appendValue = convertToArrayPayload(value);\n    const updatedFieldArrayValues = append(getCurrentFieldsValues(), appendValue);\n    const currentIndex = updatedFieldArrayValues.length - appendValue.length;\n    setFieldsAndNotify(updatedFieldArrayValues);\n    batchStateUpdate(append, {\n      argA: fillEmptyArray(value)\n    }, updatedFieldArrayValues, false);\n    registerFieldArray(appendValue, currentIndex);\n    focusNameRef.current = getFocusFieldName(currentIndex, options);\n  };\n\n  const prepend$1 = (value, options) => {\n    const prependValue = convertToArrayPayload(value);\n    const updatedFieldArrayValues = prepend(getCurrentFieldsValues(), prependValue);\n    setFieldsAndNotify(updatedFieldArrayValues);\n    batchStateUpdate(prepend, {\n      argA: fillEmptyArray(value)\n    }, updatedFieldArrayValues);\n    registerFieldArray(prependValue);\n    focusNameRef.current = getFocusFieldName(0, options);\n  };\n\n  const remove = index => {\n    const updatedFieldArrayValues = removeArrayAt(getCurrentFieldsValues(), index);\n    setFieldsAndNotify(updatedFieldArrayValues);\n    batchStateUpdate(removeArrayAt, {\n      argA: index\n    }, updatedFieldArrayValues);\n  };\n\n  const insert$1 = (index, value, options) => {\n    const insertValue = convertToArrayPayload(value);\n    const updatedFieldArrayValues = insert(getCurrentFieldsValues(), index, insertValue);\n    setFieldsAndNotify(updatedFieldArrayValues);\n    batchStateUpdate(insert, {\n      argA: index,\n      argB: fillEmptyArray(value)\n    }, updatedFieldArrayValues);\n    registerFieldArray(insertValue, index);\n    focusNameRef.current = getFocusFieldName(index, options);\n  };\n\n  const swap = (indexA, indexB) => {\n    const fieldValues = getCurrentFieldsValues();\n    swapArrayAt(fieldValues, indexA, indexB);\n    batchStateUpdate(swapArrayAt, {\n      argA: indexA,\n      argB: indexB\n    }, fieldValues, false);\n    setFieldsAndNotify(fieldValues);\n  };\n\n  const move = (from, to) => {\n    const fieldValues = getCurrentFieldsValues();\n    moveArrayAt(fieldValues, from, to);\n    setFieldsAndNotify(fieldValues);\n    batchStateUpdate(moveArrayAt, {\n      argA: from,\n      argB: to\n    }, fieldValues, false);\n  };\n\n  React.useEffect(() => {\n    inFieldArrayActionRef.current = false;\n\n    if (namesRef.current.watchAll) {\n      subjectsRef.current.state.next({});\n    } else {\n      for (const watchField of namesRef.current.watch) {\n        if (name.startsWith(watchField)) {\n          subjectsRef.current.state.next({});\n          break;\n        }\n      }\n    }\n\n    subjectsRef.current.watch.next({\n      name,\n      values: getFieldsValues(fieldsRef)\n    });\n    focusNameRef.current && focusFieldBy(fieldsRef.current, key => key.startsWith(focusNameRef.current));\n    focusNameRef.current = '';\n    subjectsRef.current.array.next({\n      name,\n      values: omitKey([...fields])\n    });\n    readFormStateRef.current.isValid && updateIsValid();\n  }, [fields, name]);\n  React.useEffect(() => {\n    const fieldArraySubscription = subjectsRef.current.array.subscribe({\n      next({\n        name: inputFieldArrayName,\n        values,\n        isReset\n      }) {\n        if (isReset) {\n          unset(fieldsRef.current, inputFieldArrayName || name);\n          inputFieldArrayName ? set(fieldArrayDefaultValuesRef.current, inputFieldArrayName, values) : fieldArrayDefaultValuesRef.current = values;\n          setFieldsAndNotify(get(fieldArrayDefaultValuesRef.current, name));\n        }\n      }\n\n    });\n    !get(fieldsRef.current, name) && set(fieldsRef.current, name, []);\n    isMountedRef.current = true;\n    return () => {\n      fieldArraySubscription.unsubscribe();\n\n      if (shouldUnmount || shouldUnregister) {\n        unregister(name);\n        unset(fieldArrayDefaultValuesRef.current, name);\n      } else {\n        const fieldArrayValues = get(getFieldsValues(fieldsRef), name);\n        fieldArrayValues && set(fieldArrayDefaultValuesRef.current, name, fieldArrayValues);\n      }\n    };\n  }, []);\n  return {\n    swap: React.useCallback(swap, [name]),\n    move: React.useCallback(move, [name]),\n    prepend: React.useCallback(prepend$1, [name]),\n    append: React.useCallback(append$1, [name]),\n    remove: React.useCallback(remove, [name]),\n    insert: React.useCallback(insert$1, [name]),\n    fields: fields\n  };\n};\n\nvar isFileInput = element => element.type === 'file';\n\nvar isMultipleSelect = element => element.type === `select-multiple`;\n\nvar isRadioInput = element => element.type === 'radio';\n\nconst defaultResult = {\n  value: false,\n  isValid: false\n};\nconst validResult = {\n  value: true,\n  isValid: true\n};\n\nvar getCheckboxValue = options => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options.filter(option => option && option.checked && !option.disabled).map(option => option.value);\n      return {\n        value: values,\n        isValid: !!values.length\n      };\n    }\n\n    return options[0].checked && !options[0].disabled ? // @ts-expect-error expected to work in the browser\n    options[0].attributes && !isUndefined(options[0].attributes.value) ? isUndefined(options[0].value) || options[0].value === '' ? validResult : {\n      value: options[0].value,\n      isValid: true\n    } : validResult : defaultResult;\n  }\n\n  return defaultResult;\n};\n\nvar getFieldValueAs = (value, {\n  valueAsNumber,\n  valueAsDate,\n  setValueAs\n}) => isUndefined(value) ? value : valueAsNumber ? value === '' ? NaN : +value : valueAsDate ? new Date(value) : setValueAs ? setValueAs(value) : value;\n\nvar getMultipleSelectValue = options => [...options].filter(({\n  selected\n}) => selected).map(({\n  value\n}) => value);\n\nconst defaultReturn = {\n  isValid: false,\n  value: null\n};\n\nvar getRadioValue = options => Array.isArray(options) ? options.reduce((previous, option) => option && option.checked && !option.disabled ? {\n  isValid: true,\n  value: option.value\n} : previous, defaultReturn) : defaultReturn;\n\nfunction getFieldValue(field) {\n  if (field && field._f) {\n    const ref = field._f.ref;\n\n    if (ref.disabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field._f.refs).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBoxInput(ref)) {\n      return getCheckboxValue(field._f.refs).value;\n    }\n\n    return getFieldValueAs(isUndefined(ref.value) ? field._f.ref.value : ref.value, field._f);\n  }\n}\n\nvar getResolverOptions = (fieldsNames, fieldsRefs, criteriaMode, shouldUseNativeValidation) => {\n  const fields = {};\n\n  for (const name of fieldsNames) {\n    const field = get(fieldsRefs, name);\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames],\n    fields,\n    shouldUseNativeValidation\n  };\n};\n\nvar hasValidation = (options, mounted) => mounted && options && (options.required || options.min || options.max || options.maxLength || options.minLength || options.pattern || options.validate);\n\nvar skipValidation = ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n\n  return true;\n};\n\nvar isFunction = value => typeof value === 'function';\n\nvar isString = value => typeof value === 'string';\n\nvar isMessage = value => isString(value) || React.isValidElement(value);\n\nvar isRegex = value => value instanceof RegExp;\n\nfunction getValidateError(result, ref, type = 'validate') {\n  if (isMessage(result) || Array.isArray(result) && result.every(isMessage) || isBoolean(result) && !result) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref\n    };\n  }\n}\n\nvar getValueAndMessage = validationData => isObject(validationData) && !isRegex(validationData) ? validationData : {\n  value: validationData,\n  message: ''\n};\n\nvar validateField = async ({\n  _f: {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    value: inputValue,\n    valueAsNumber,\n    mount\n  }\n}, validateAllFieldCriteria, shouldUseNativeValidation) => {\n  if (!mount) {\n    return {};\n  }\n\n  const inputRef = refs ? refs[0] : ref;\n\n  const setCustomValidty = message => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n\n  const error = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = (valueAsNumber || isFileInput(ref)) && !ref.value || inputValue === '' || Array.isArray(inputValue) && !inputValue.length;\n  const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\n\n  const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = Object.assign({\n      type: exceedMax ? maxType : minType,\n      message,\n      ref\n    }, appendErrorsCurry(exceedMax ? maxType : minType, message));\n  };\n\n  if (required && (!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue)) || isBoolean(inputValue) && !inputValue || isCheckBox && !getCheckboxValue(refs).isValid || isRadio && !getRadioValue(refs).isValid)) {\n    const {\n      value,\n      message\n    } = isMessage(required) ? {\n      value: !!required,\n      message: required\n    } : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = Object.assign({\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef\n      }, appendErrorsCurry(INPUT_VALIDATION_RULES.required, message));\n\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue)) {\n      const valueNumber = ref.valueAsNumber || parseFloat(inputValue);\n\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate = ref.valueAsDate || new Date(inputValue);\n\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\n\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name].message);\n        return error;\n      }\n    }\n  }\n\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax = !isNullOrUndefined(maxLengthOutput.value) && inputValue.length > maxLengthOutput.value;\n    const exceedMin = !isNullOrUndefined(minLengthOutput.value) && inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);\n\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name].message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const {\n      value: patternValue,\n      message\n    } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = Object.assign({\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref\n      }, appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message));\n\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = Object.assign(Object.assign({}, validateError), appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message));\n\n        if (!validateAllFieldCriteria) {\n          setCustomValidty(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {};\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(await validate[key](inputValue), inputRef, key);\n\n        if (validateError) {\n          validationResult = Object.assign(Object.assign({}, validateError), appendErrorsCurry(key, validateError.message));\n          setCustomValidty(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = Object.assign({\n          ref: inputRef\n        }, validationResult);\n\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidty(true);\n  return error;\n};\n\nvar getValidationModes = mode => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched\n});\n\nvar isHTMLElement = value => value instanceof HTMLElement;\n\nvar isRadioOrCheckboxFunction = ref => isRadioInput(ref) || isCheckBoxInput(ref);\n\nclass Subscription {\n  constructor() {\n    this.tearDowns = [];\n  }\n\n  add(tearDown) {\n    this.tearDowns.push(tearDown);\n  }\n\n  unsubscribe() {\n    for (const teardown of this.tearDowns) {\n      teardown();\n    }\n\n    this.tearDowns = [];\n  }\n\n}\n\nclass Subscriber {\n  constructor(observer, subscription) {\n    this.observer = observer;\n    this.closed = false;\n    subscription.add(() => this.closed = true);\n  }\n\n  next(value) {\n    if (!this.closed) {\n      this.observer.next(value);\n    }\n  }\n\n}\n\nclass Subject {\n  constructor() {\n    this.observers = [];\n  }\n\n  next(value) {\n    for (const observer of this.observers) {\n      observer.next(value);\n    }\n  }\n\n  subscribe(observer) {\n    const subscription = new Subscription();\n    const subscriber = new Subscriber(observer, subscription);\n    this.observers.push(subscriber);\n    return subscription;\n  }\n\n  unsubscribe() {\n    this.observers = [];\n  }\n\n}\n\nconst isWindowUndefined = typeof window === 'undefined';\n\nfunction useForm({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {},\n  shouldFocusError = true,\n  shouldUseNativeValidation,\n  shouldUnregister,\n  criteriaMode\n} = {}) {\n  const [formState, updateFormState] = React.useState({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {}\n  });\n  const readFormStateRef = React.useRef({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touchedFields: !isProxyEnabled,\n    isValidating: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n    errors: !isProxyEnabled\n  });\n  const resolverRef = React.useRef(resolver);\n  const formStateRef = React.useRef(formState);\n  const fieldsRef = React.useRef({});\n  const defaultValuesRef = React.useRef(defaultValues);\n  const fieldArrayDefaultValuesRef = React.useRef({});\n  const contextRef = React.useRef(context);\n  const inFieldArrayActionRef = React.useRef(false);\n  const isMountedRef = React.useRef(false);\n  const subjectsRef = React.useRef({\n    watch: new Subject(),\n    control: new Subject(),\n    array: new Subject(),\n    state: new Subject()\n  });\n  const namesRef = React.useRef({\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n    watchAll: false\n  });\n  const validationMode = getValidationModes(mode);\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  resolverRef.current = resolver;\n  contextRef.current = context;\n\n  const isFieldWatched = name => namesRef.current.watchAll || namesRef.current.watch.has(name) || namesRef.current.watch.has((name.match(/\\w+/) || [])[0]);\n\n  const shouldRenderBaseOnError = React.useCallback(async (shouldSkipRender, name, error, inputState, isValidFromResolver, isWatched) => {\n    const previousError = get(formStateRef.current.errors, name);\n    const isValid = readFormStateRef.current.isValid ? resolver ? isValidFromResolver : await validateForm(fieldsRef.current, true) : false;\n    error ? set(formStateRef.current.errors, name, error) : unset(formStateRef.current.errors, name);\n\n    if ((isWatched || (error ? !deepEqual(previousError, error, true) : previousError) || !isEmptyObject(inputState) || formStateRef.current.isValid !== isValid) && !shouldSkipRender) {\n      const updatedFormState = Object.assign(Object.assign({}, inputState), {\n        isValid: !!isValid,\n        errors: formStateRef.current.errors,\n        name\n      });\n      formStateRef.current = Object.assign(Object.assign({}, formStateRef.current), updatedFormState);\n      subjectsRef.current.state.next(isWatched ? {\n        name\n      } : updatedFormState);\n    }\n\n    subjectsRef.current.state.next({\n      isValidating: false\n    });\n  }, []);\n  const setFieldValue = React.useCallback((name, rawValue, options = {}, shouldRender, shouldRegister) => {\n    shouldRegister && register(name);\n    const field = get(fieldsRef.current, name);\n\n    if (field) {\n      const _f = field._f;\n\n      if (_f) {\n        const value = isWeb && isHTMLElement(_f.ref) && isNullOrUndefined(rawValue) ? '' : rawValue;\n        _f.value = getFieldValueAs(rawValue, _f);\n\n        if (isRadioInput(_f.ref)) {\n          (_f.refs || []).forEach(radioRef => radioRef.checked = radioRef.value === value);\n        } else if (isFileInput(_f.ref) && !isString(value)) {\n          _f.ref.files = value;\n        } else if (isMultipleSelect(_f.ref)) {\n          [..._f.ref.options].forEach(selectRef => selectRef.selected = value.includes(selectRef.value));\n        } else if (isCheckBoxInput(_f.ref) && _f.refs) {\n          _f.refs.length > 1 ? _f.refs.forEach(checkboxRef => checkboxRef.checked = Array.isArray(value) ? !!value.find(data => data === checkboxRef.value) : value === checkboxRef.value) : _f.refs[0].checked = !!value;\n        } else {\n          _f.ref.value = value;\n        }\n\n        if (shouldRender) {\n          const values = getFieldsValues(fieldsRef);\n          set(values, name, rawValue);\n          subjectsRef.current.control.next({\n            values: Object.assign(Object.assign({}, defaultValuesRef.current), values),\n            name\n          });\n        }\n\n        (options.shouldDirty || options.shouldTouch) && updateTouchAndDirtyState(name, value, options.shouldTouch);\n        options.shouldValidate && trigger(name);\n      } else {\n        field._f = {\n          ref: {\n            name,\n            value: rawValue\n          },\n          value: rawValue\n        };\n      }\n    }\n  }, []);\n  const getIsDirty = React.useCallback((name, data) => {\n    const formValues = getFieldsValues(fieldsRef);\n    name && data && set(formValues, name, data);\n    return !deepEqual(formValues, defaultValuesRef.current);\n  }, []);\n  const updateTouchAndDirtyState = React.useCallback((name, inputValue, isCurrentTouched, shouldRender = true) => {\n    const state = {\n      name\n    };\n    let isChanged = false;\n\n    if (readFormStateRef.current.isDirty) {\n      const previousIsDirty = formStateRef.current.isDirty;\n      formStateRef.current.isDirty = getIsDirty();\n      state.isDirty = formStateRef.current.isDirty;\n      isChanged = previousIsDirty !== state.isDirty;\n    }\n\n    if (readFormStateRef.current.dirtyFields && !isCurrentTouched) {\n      const isPreviousFieldDirty = get(formStateRef.current.dirtyFields, name);\n      const isCurrentFieldDirty = !deepEqual(get(defaultValuesRef.current, name), inputValue);\n      isCurrentFieldDirty ? set(formStateRef.current.dirtyFields, name, true) : unset(formStateRef.current.dirtyFields, name);\n      state.dirtyFields = formStateRef.current.dirtyFields;\n      isChanged = isChanged || isPreviousFieldDirty !== get(formStateRef.current.dirtyFields, name);\n    }\n\n    const isPreviousFieldTouched = get(formStateRef.current.touchedFields, name);\n\n    if (isCurrentTouched && !isPreviousFieldTouched) {\n      set(formStateRef.current.touchedFields, name, isCurrentTouched);\n      state.touchedFields = formStateRef.current.touchedFields;\n      isChanged = isChanged || readFormStateRef.current.touchedFields && isPreviousFieldTouched !== isCurrentTouched;\n    }\n\n    isChanged && shouldRender && subjectsRef.current.state.next(state);\n    return isChanged ? state : {};\n  }, []);\n  const executeInlineValidation = React.useCallback(async (name, skipReRender) => {\n    const error = (await validateField(get(fieldsRef.current, name), isValidateAllFieldCriteria, shouldUseNativeValidation))[name];\n    shouldRenderBaseOnError(skipReRender, name, error);\n    return isUndefined(error);\n  }, [isValidateAllFieldCriteria]);\n  const executeResolverValidation = React.useCallback(async names => {\n    const {\n      errors\n    } = await resolverRef.current(getFieldsValues(fieldsRef), contextRef.current, getResolverOptions(namesRef.current.mount, fieldsRef.current, criteriaMode, shouldUseNativeValidation));\n\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error ? set(formStateRef.current.errors, name, error) : unset(formStateRef.current.errors, name);\n      }\n    } else {\n      formStateRef.current.errors = errors;\n    }\n\n    return errors;\n  }, [criteriaMode, shouldUseNativeValidation]);\n\n  const validateForm = async (fieldsRef, shouldCheckValid, context = {\n    valid: true\n  }) => {\n    for (const name in fieldsRef) {\n      const field = fieldsRef[name];\n\n      if (field) {\n        const _f = field._f;\n        const current = omit(field, '_f');\n\n        if (_f) {\n          const fieldError = await validateField(field, isValidateAllFieldCriteria, shouldUseNativeValidation);\n\n          if (shouldCheckValid) {\n            if (fieldError[_f.name]) {\n              context.valid = false;\n              break;\n            }\n          } else {\n            fieldError[_f.name] ? set(formStateRef.current.errors, _f.name, fieldError[_f.name]) : unset(formStateRef.current.errors, _f.name);\n          }\n        }\n\n        current && (await validateForm(current, shouldCheckValid, context));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const trigger = React.useCallback(async (name, options = {}) => {\n    const fieldNames = convertToArrayPayload(name);\n    let isValid;\n    subjectsRef.current.state.next({\n      isValidating: true\n    });\n\n    if (resolver) {\n      const schemaResult = await executeResolverValidation(isUndefined(name) ? name : fieldNames);\n      isValid = name ? fieldNames.every(name => !get(schemaResult, name)) : isEmptyObject(schemaResult);\n    } else {\n      if (name) {\n        isValid = (await Promise.all(fieldNames.filter(fieldName => get(fieldsRef.current, fieldName, {})._f).map(async fieldName => await executeInlineValidation(fieldName, true)))).every(Boolean);\n      } else {\n        await validateForm(fieldsRef.current);\n        isValid = isEmptyObject(formStateRef.current.errors);\n      }\n    }\n\n    subjectsRef.current.state.next(Object.assign(Object.assign({}, isString(name) ? {\n      name\n    } : {}), {\n      errors: formStateRef.current.errors,\n      isValidating: false\n    }));\n\n    if (options.shouldFocus && !isValid) {\n      focusFieldBy(fieldsRef.current, key => get(formStateRef.current.errors, key), fieldNames);\n    }\n\n    readFormStateRef.current.isValid && updateIsValid();\n    return isValid;\n  }, [executeResolverValidation, executeInlineValidation]);\n\n  const updateIsValidAndInputValue = (name, ref) => {\n    const field = get(fieldsRef.current, name);\n\n    if (field) {\n      const isValueUndefined = isUndefined(field._f.value);\n      const defaultValue = isValueUndefined ? get(defaultValuesRef.current, name) : field._f.value;\n\n      if (!isUndefined(defaultValue)) {\n        if (ref && ref.defaultChecked) {\n          field._f.value = getFieldValue(field);\n        } else if (isNameInFieldArray(namesRef.current.array, name)) {\n          field._f.value = defaultValue;\n        } else {\n          setFieldValue(name, defaultValue);\n        }\n      } else if (isValueUndefined) {\n        field._f.value = getFieldValue(field);\n      }\n    }\n\n    isMountedRef.current && readFormStateRef.current.isValid && updateIsValid();\n  };\n\n  const updateIsValid = React.useCallback(async (values = {}) => {\n    const isValid = resolver ? isEmptyObject((await resolverRef.current(Object.assign(Object.assign({}, getFieldsValues(fieldsRef)), values), contextRef.current, getResolverOptions(namesRef.current.mount, fieldsRef.current, criteriaMode, shouldUseNativeValidation))).errors) : await validateForm(fieldsRef.current, true);\n    isValid !== formStateRef.current.isValid && subjectsRef.current.state.next({\n      isValid\n    });\n  }, [criteriaMode, shouldUseNativeValidation]);\n  const setInternalValues = React.useCallback((name, value, options) => Object.entries(value).forEach(([inputKey, inputValue]) => {\n    const fieldName = `${name}.${inputKey}`;\n    const field = get(fieldsRef.current, fieldName);\n    const isFieldArray = namesRef.current.array.has(name);\n    isFieldArray || !isPrimitive(inputValue) || field && !field._f ? setInternalValues(fieldName, inputValue, options) : setFieldValue(fieldName, inputValue, options, true, !field);\n  }), [trigger]);\n\n  const setValue = (name, value, options = {}) => {\n    const field = get(fieldsRef.current, name);\n    const isFieldArray = namesRef.current.array.has(name);\n\n    if (isFieldArray) {\n      subjectsRef.current.array.next({\n        values: value,\n        name,\n        isReset: true\n      });\n\n      if ((readFormStateRef.current.isDirty || readFormStateRef.current.dirtyFields) && options.shouldDirty) {\n        set(formStateRef.current.dirtyFields, name, setFieldArrayDirtyFields(value, get(defaultValuesRef.current, name, []), get(formStateRef.current.dirtyFields, name, [])));\n        subjectsRef.current.state.next({\n          name,\n          dirtyFields: formStateRef.current.dirtyFields,\n          isDirty: getIsDirty(name, value)\n        });\n      }\n\n      !value.length && set(fieldsRef.current, name, []) && set(fieldArrayDefaultValuesRef.current, name, []);\n    }\n\n    (field && !field._f || isFieldArray) && !isNullOrUndefined(value) ? setInternalValues(name, value, isFieldArray ? {} : options) : setFieldValue(name, value, options, true, !field);\n    isFieldWatched(name) && subjectsRef.current.state.next({});\n    subjectsRef.current.watch.next({\n      name,\n      values: getValues()\n    });\n  };\n\n  const handleChange = React.useCallback(async ({\n    type,\n    target,\n    target: {\n      value,\n      type: inputType\n    }\n  }) => {\n    let name = target.name;\n    let error;\n    let isValid;\n    const field = get(fieldsRef.current, name);\n\n    if (field) {\n      let inputValue = inputType ? getFieldValue(field) : undefined;\n      inputValue = isUndefined(inputValue) ? value : inputValue;\n      const isBlurEvent = type === EVENTS.BLUR;\n      const {\n        isOnBlur: isReValidateOnBlur,\n        isOnChange: isReValidateOnChange\n      } = getValidationModes(reValidateMode);\n      const shouldSkipValidation = !hasValidation(field._f, field._f.mount) && !resolver && !get(formStateRef.current.errors, name) || skipValidation(Object.assign({\n        isBlurEvent,\n        isTouched: !!get(formStateRef.current.touchedFields, name),\n        isSubmitted: formStateRef.current.isSubmitted,\n        isReValidateOnBlur,\n        isReValidateOnChange\n      }, validationMode));\n      const isWatched = !isBlurEvent && isFieldWatched(name);\n\n      if (!isUndefined(inputValue)) {\n        field._f.value = inputValue;\n      }\n\n      const inputState = updateTouchAndDirtyState(name, field._f.value, isBlurEvent, false);\n      const shouldRender = !isEmptyObject(inputState) || isWatched;\n\n      if (shouldSkipValidation) {\n        !isBlurEvent && subjectsRef.current.watch.next({\n          name,\n          type,\n          values: getValues()\n        });\n        return shouldRender && subjectsRef.current.state.next(isWatched ? {\n          name\n        } : Object.assign(Object.assign({}, inputState), {\n          name\n        }));\n      }\n\n      subjectsRef.current.state.next({\n        isValidating: true\n      });\n\n      if (resolver) {\n        const {\n          errors\n        } = await resolverRef.current(getFieldsValues(fieldsRef), contextRef.current, getResolverOptions([name], fieldsRef.current, criteriaMode, shouldUseNativeValidation));\n        error = get(errors, name);\n\n        if (isCheckBoxInput(target) && !error) {\n          const parentNodeName = getNodeParentName(name);\n          const currentError = get(errors, parentNodeName, {});\n          currentError.type && currentError.message && (error = currentError);\n\n          if (currentError || get(formStateRef.current.errors, parentNodeName)) {\n            name = parentNodeName;\n          }\n        }\n\n        isValid = isEmptyObject(errors);\n      } else {\n        error = (await validateField(field, isValidateAllFieldCriteria, shouldUseNativeValidation))[name];\n      }\n\n      !isBlurEvent && subjectsRef.current.watch.next({\n        name,\n        type,\n        values: getValues()\n      });\n      shouldRenderBaseOnError(false, name, error, inputState, isValid, isWatched);\n    }\n  }, []);\n\n  const getValues = fieldNames => {\n    const values = Object.assign(Object.assign({}, defaultValuesRef.current), getFieldsValues(fieldsRef));\n    return isUndefined(fieldNames) ? values : isString(fieldNames) ? get(values, fieldNames) : fieldNames.map(name => get(values, name));\n  };\n\n  const clearErrors = name => {\n    name ? convertToArrayPayload(name).forEach(inputName => unset(formStateRef.current.errors, inputName)) : formStateRef.current.errors = {};\n    subjectsRef.current.state.next({\n      errors: formStateRef.current.errors\n    });\n  };\n\n  const setError = (name, error, options) => {\n    const ref = ((get(fieldsRef.current, name) || {\n      _f: {}\n    })._f || {}).ref;\n    set(formStateRef.current.errors, name, Object.assign(Object.assign({}, error), {\n      ref\n    }));\n    subjectsRef.current.state.next({\n      name,\n      errors: formStateRef.current.errors,\n      isValid: false\n    });\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watchInternal = React.useCallback((fieldNames, defaultValue, isGlobal, formValues) => {\n    const isArrayNames = Array.isArray(fieldNames);\n    const fieldValues = formValues || isMountedRef.current ? Object.assign(Object.assign({}, defaultValuesRef.current), formValues || getFieldsValues(fieldsRef)) : isUndefined(defaultValue) ? defaultValuesRef.current : isArrayNames ? defaultValue : {\n      [fieldNames]: defaultValue\n    };\n\n    if (isUndefined(fieldNames)) {\n      isGlobal && (namesRef.current.watchAll = true);\n      return fieldValues;\n    }\n\n    const result = [];\n\n    for (const fieldName of convertToArrayPayload(fieldNames)) {\n      isGlobal && namesRef.current.watch.add(fieldName);\n      result.push(get(fieldValues, fieldName));\n    }\n\n    return isArrayNames ? result : result[0];\n  }, []);\n\n  const watch = (fieldName, defaultValue) => isFunction(fieldName) ? subjectsRef.current.watch.subscribe({\n    next: info => fieldName(watchInternal(undefined, defaultValue), info)\n  }) : watchInternal(fieldName, defaultValue, true);\n\n  const unregister = (name, options = {}) => {\n    for (const inputName of name ? convertToArrayPayload(name) : namesRef.current.mount) {\n      namesRef.current.mount.delete(inputName);\n      namesRef.current.array.delete(inputName);\n\n      if (get(fieldsRef.current, inputName)) {\n        !options.keepError && unset(formStateRef.current.errors, inputName);\n        !options.keepValue && unset(fieldsRef.current, inputName);\n        !options.keepDirty && unset(formStateRef.current.dirtyFields, inputName);\n        !options.keepTouched && unset(formStateRef.current.touchedFields, inputName);\n        !options.keepDefaultValue && unset(defaultValuesRef.current, inputName);\n        subjectsRef.current.watch.next({\n          name: inputName,\n          values: getValues()\n        });\n      }\n    }\n\n    subjectsRef.current.state.next(Object.assign(Object.assign({}, formStateRef.current), !options.keepDirty ? {} : {\n      isDirty: getIsDirty()\n    }));\n    !options.keepIsValid && updateIsValid();\n  };\n\n  const registerFieldRef = (name, ref, options) => {\n    register(name, options);\n    let field = get(fieldsRef.current, name);\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n\n    if (ref === field._f.ref || isRadioOrCheckbox && compact(field._f.refs || []).find(option => option === ref)) {\n      return;\n    }\n\n    field = {\n      _f: isRadioOrCheckbox ? Object.assign(Object.assign({}, field._f), {\n        refs: [...compact(field._f.refs || []).filter(ref => isHTMLElement(ref) && document.contains(ref)), ref],\n        ref: {\n          type: ref.type,\n          name\n        }\n      }) : Object.assign(Object.assign({}, field._f), {\n        ref\n      })\n    };\n    set(fieldsRef.current, name, field);\n    updateIsValidAndInputValue(name, ref);\n  };\n\n  const register = React.useCallback((name, options = {}) => {\n    const field = get(fieldsRef.current, name);\n    set(fieldsRef.current, name, {\n      _f: Object.assign(Object.assign(Object.assign({}, field && field._f ? field._f : {\n        ref: {\n          name\n        }\n      }), {\n        name,\n        mount: true\n      }), options)\n    });\n    namesRef.current.mount.add(name);\n    !field && updateIsValidAndInputValue(name);\n    return isWindowUndefined ? {\n      name: name\n    } : {\n      name,\n      onChange: handleChange,\n      onBlur: handleChange,\n      ref: ref => {\n        if (ref) {\n          registerFieldRef(name, ref, options);\n        } else {\n          const field = get(fieldsRef.current, name, {});\n          const shouldUnmount = shouldUnregister || options.shouldUnregister;\n\n          if (field._f) {\n            field._f.mount = false; // If initial state of field element is disabled,\n            // value is not set on first \"register\"\n            // re-sync the value in when it switched to enabled\n\n            if (isUndefined(field._f.value)) {\n              field._f.value = field._f.ref.value;\n            }\n          }\n\n          shouldUnmount && !(isNameInFieldArray(namesRef.current.array, name) && inFieldArrayActionRef.current) && namesRef.current.unMount.add(name);\n        }\n      }\n    };\n  }, []);\n  const handleSubmit = React.useCallback((onValid, onInvalid) => async e => {\n    if (e) {\n      e.preventDefault && e.preventDefault();\n      e.persist && e.persist();\n    }\n\n    let hasNoPromiseError = true;\n    let fieldValues = getFieldsValues(fieldsRef);\n    subjectsRef.current.state.next({\n      isSubmitting: true\n    });\n\n    try {\n      if (resolver) {\n        const {\n          errors,\n          values\n        } = await resolverRef.current(fieldValues, contextRef.current, getResolverOptions(namesRef.current.mount, fieldsRef.current, criteriaMode, shouldUseNativeValidation));\n        formStateRef.current.errors = errors;\n        fieldValues = values;\n      } else {\n        await validateForm(fieldsRef.current);\n      }\n\n      if (isEmptyObject(formStateRef.current.errors) && Object.keys(formStateRef.current.errors).every(name => get(fieldValues, name))) {\n        subjectsRef.current.state.next({\n          errors: {},\n          isSubmitting: true\n        });\n        await onValid(fieldValues, e);\n      } else {\n        onInvalid && (await onInvalid(formStateRef.current.errors, e));\n        shouldFocusError && focusFieldBy(fieldsRef.current, key => get(formStateRef.current.errors, key), namesRef.current.mount);\n      }\n    } catch (err) {\n      hasNoPromiseError = false;\n      throw err;\n    } finally {\n      formStateRef.current.isSubmitted = true;\n      subjectsRef.current.state.next({\n        isSubmitted: true,\n        isSubmitting: false,\n        isSubmitSuccessful: isEmptyObject(formStateRef.current.errors) && hasNoPromiseError,\n        submitCount: formStateRef.current.submitCount + 1,\n        errors: formStateRef.current.errors\n      });\n    }\n  }, [shouldFocusError, isValidateAllFieldCriteria, criteriaMode, shouldUseNativeValidation]);\n\n  const registerAbsentFields = (defaultValues, name = '') => {\n    for (const key in defaultValues) {\n      const value = defaultValues[key];\n      const fieldName = name + (name ? '.' : '') + key;\n      const field = get(fieldsRef.current, fieldName);\n\n      if (!field || !field._f) {\n        if (isObject(value) || Array.isArray(value)) {\n          registerAbsentFields(value, fieldName);\n        } else if (!field) {\n          register(fieldName, {\n            value\n          });\n        }\n      }\n    }\n  };\n\n  const reset = (values, keepStateOptions = {}) => {\n    const updatedValues = values || defaultValuesRef.current;\n\n    if (isWeb && !keepStateOptions.keepValues) {\n      for (const name of namesRef.current.mount) {\n        const field = get(fieldsRef.current, name);\n\n        if (field && field._f) {\n          const inputRef = Array.isArray(field._f.refs) ? field._f.refs[0] : field._f.ref;\n\n          try {\n            isHTMLElement(inputRef) && inputRef.closest('form').reset();\n            break;\n          } catch (_a) {}\n        }\n      }\n    }\n\n    !keepStateOptions.keepDefaultValues && (defaultValuesRef.current = Object.assign({}, updatedValues));\n\n    if (!keepStateOptions.keepValues) {\n      fieldsRef.current = {};\n      subjectsRef.current.control.next({\n        values: keepStateOptions.keepDefaultValues ? defaultValuesRef.current : Object.assign({}, updatedValues)\n      });\n      subjectsRef.current.watch.next({\n        values: Object.assign({}, updatedValues)\n      });\n      subjectsRef.current.array.next({\n        values: Object.assign({}, updatedValues),\n        isReset: true\n      });\n    }\n\n    namesRef.current = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false\n    };\n    subjectsRef.current.state.next({\n      submitCount: keepStateOptions.keepSubmitCount ? formStateRef.current.submitCount : 0,\n      isDirty: keepStateOptions.keepDirty ? formStateRef.current.isDirty : keepStateOptions.keepDefaultValues ? deepEqual(values, defaultValuesRef.current) : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted ? formStateRef.current.isSubmitted : false,\n      dirtyFields: keepStateOptions.keepDirty ? formStateRef.current.dirtyFields : {},\n      touchedFields: keepStateOptions.keepTouched ? formStateRef.current.touchedFields : {},\n      errors: keepStateOptions.keepErrors ? formStateRef.current.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false\n    });\n    isMountedRef.current = !!keepStateOptions.keepIsValid;\n  };\n\n  const setFocus = name => get(fieldsRef.current, name)._f.ref.focus();\n\n  React.useEffect(() => {\n    const formStateSubscription = subjectsRef.current.state.subscribe({\n      next(formState) {\n        if (shouldRenderFormState(formState, readFormStateRef.current, true)) {\n          formStateRef.current = Object.assign(Object.assign({}, formStateRef.current), formState);\n          updateFormState(formStateRef.current);\n        }\n      }\n\n    });\n    const useFieldArraySubscription = subjectsRef.current.array.subscribe({\n      next(state) {\n        if (state.values && state.name && readFormStateRef.current.isValid) {\n          const values = getFieldsValues(fieldsRef);\n          set(values, state.name, state.values);\n          updateIsValid(values);\n        }\n      }\n\n    });\n    return () => {\n      formStateSubscription.unsubscribe();\n      useFieldArraySubscription.unsubscribe();\n    };\n  }, []);\n  React.useEffect(() => {\n    const isLiveInDom = ref => !isHTMLElement(ref) || !document.contains(ref);\n\n    if (!isMountedRef.current) {\n      isMountedRef.current = true;\n      readFormStateRef.current.isValid && updateIsValid();\n      !shouldUnregister && registerAbsentFields(defaultValuesRef.current);\n    }\n\n    for (const name of namesRef.current.unMount) {\n      const field = get(fieldsRef.current, name);\n      field && (field._f.refs ? field._f.refs.every(isLiveInDom) : isLiveInDom(field._f.ref)) && unregister(name);\n    }\n\n    namesRef.current.unMount = new Set();\n  });\n  return {\n    control: React.useMemo(() => ({\n      register,\n      inFieldArrayActionRef,\n      getIsDirty,\n      subjectsRef,\n      watchInternal,\n      fieldsRef,\n      updateIsValid,\n      namesRef,\n      readFormStateRef,\n      formStateRef,\n      defaultValuesRef,\n      fieldArrayDefaultValuesRef,\n      unregister,\n      shouldUnmount: shouldUnregister\n    }), []),\n    formState: getProxyFormState(isProxyEnabled, formState, readFormStateRef),\n    trigger,\n    register,\n    handleSubmit,\n    watch: React.useCallback(watch, []),\n    setValue: React.useCallback(setValue, [setInternalValues]),\n    getValues: React.useCallback(getValues, []),\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    unregister: React.useCallback(unregister, []),\n    setError: React.useCallback(setError, []),\n    setFocus: React.useCallback(setFocus, [])\n  };\n}\n\nfunction useWatch(props) {\n  const {\n    control,\n    name,\n    defaultValue\n  } = props || {};\n  const methods = useFormContext();\n  const nameRef = React.useRef(name);\n  nameRef.current = name;\n  const {\n    watchInternal,\n    subjectsRef\n  } = control || methods.control;\n  const [value, updateValue] = React.useState(isUndefined(defaultValue) ? watchInternal(name) : defaultValue);\n  React.useEffect(() => {\n    watchInternal(name);\n    const watchSubscription = subjectsRef.current.watch.subscribe({\n      next: ({\n        name: inputName,\n        values\n      }) => (!nameRef.current || !inputName || convertToArrayPayload(nameRef.current).some(fieldName => inputName && fieldName && (fieldName.startsWith(inputName) || inputName.startsWith(fieldName)))) && updateValue(watchInternal(nameRef.current, defaultValue, false, values))\n    });\n    return () => watchSubscription.unsubscribe();\n  }, []);\n  return value;\n}\n\nexport { Controller, FormProvider, appendErrors, get, set, useController, useFieldArray, useForm, useFormContext, useFormState, useWatch };","map":{"version":3,"sources":["../src/utils/isCheckBoxInput.ts","../src/utils/isNullOrUndefined.ts","../src/utils/isObject.ts","../src/logic/getControllerValue.ts","../src/logic/getNodeParentName.ts","../src/logic/isNameInFieldArray.ts","../src/utils/compact.ts","../src/utils/isUndefined.ts","../src/utils/get.ts","../src/constants.ts","../src/utils/omit.ts","../src/useFormContext.tsx","../src/logic/getProxyFormState.ts","../src/utils/isEmptyObject.ts","../src/logic/shouldRenderFormState.ts","../src/utils/convertToArrayPayload.ts","../src/utils/isWeb.ts","../src/utils/isProxyEnabled.ts","../src/useFormState.ts","../src/useController.ts","../src/controller.tsx","../src/logic/appendErrors.ts","../src/utils/isKey.ts","../src/utils/stringToPath.ts","../src/utils/set.ts","../src/logic/focusFieldBy.ts","../src/logic/getFieldsValues.ts","../src/logic/generateId.ts","../src/logic/mapId.ts","../src/utils/isPrimitive.ts","../src/utils/deepEqual.ts","../src/utils/deepMerge.ts","../src/logic/setFieldArrayDirtyFields.ts","../src/utils/append.ts","../src/utils/fillEmptyArray.ts","../src/utils/insert.ts","../src/utils/move.ts","../src/utils/prepend.ts","../src/utils/remove.ts","../src/utils/swap.ts","../src/utils/isBoolean.ts","../src/utils/unset.ts","../src/useFieldArray.ts","../src/utils/isFileInput.ts","../src/utils/isMultipleSelect.ts","../src/utils/isRadioInput.ts","../src/logic/getCheckboxValue.ts","../src/logic/getFieldValueAs.ts","../src/logic/getMultipleSelectValue.ts","../src/logic/getRadioValue.ts","../src/logic/getFieldValue.ts","../src/logic/getResolverOptions.ts","../src/logic/hasValidation.ts","../src/logic/skipValidation.ts","../src/utils/isFunction.ts","../src/utils/isString.ts","../src/utils/isMessage.ts","../src/utils/isRegex.ts","../src/logic/getValidateError.ts","../src/logic/getValueAndMessage.ts","../src/logic/validateField.ts","../src/utils/getValidationModes.ts","../src/utils/isHTMLElement.ts","../src/utils/isRadioOrCheckbox.ts","../src/utils/Subject.ts","../src/useForm.ts","../src/useWatch.ts"],"names":["getFieldArrayParentName","append","appendAt","prepend","prependAt","insert","insertAt","isCheckBox"],"mappings":"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","sourcesContent":["import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (value: unknown): value is null | undefined => value == null;\n","import isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !(value instanceof Date);\n","import isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isObject from '../utils/isObject';\n\ntype Event = { target: any };\n\nexport default (event: unknown) =>\n  isObject(event) && (event as Event).target\n    ? isCheckBoxInput((event as Event).target)\n      ? (event as Event).target.checked\n      : (event as Event).target.value\n    : event;\n","export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  [...names].some((current) => getNodeParentName(name) === current);\n","export default (value: any[]) => value.filter(Boolean);\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T extends unknown>(\n  obj: T,\n  path: string,\n  defaultValue?: unknown,\n) => {\n  if (isObject(obj) && path) {\n    const result = compact(path.split(/[,[\\].]+?/)).reduce(\n      (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n      obj,\n    );\n\n    return isUndefined(result) || result === obj\n      ? isUndefined(obj[path as keyof T])\n        ? defaultValue\n        : obj[path as keyof T]\n      : result;\n  }\n\n  return undefined;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default <Key extends string, T extends Record<Key, any>>(\n  source: T,\n  key: Key,\n): Omit<T, Key> => {\n  const copy = { ...source };\n  delete copy[key];\n\n  return copy;\n};\n","import * as React from 'react';\n\nimport omit from './utils/omit';\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst FormContext = React.createContext<UseFormReturn | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n>(): UseFormReturn<TFieldValues> =>\n  React.useContext(FormContext) as unknown as UseFormReturn<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>(\n  props: FormProviderProps<TFieldValues>,\n) => (\n  <FormContext.Provider\n    value={omit(props, 'children') as unknown as UseFormReturn}\n  >\n    {props.children}\n  </FormContext.Provider>\n);\n","import * as React from 'react';\n\nimport { VALIDATION_MODE } from '../constants';\nimport { FormState, FormStateProxy, ReadFormState } from '../types';\n\nexport default <TFieldValues>(\n  isProxyEnabled: boolean,\n  formState: FormState<TFieldValues>,\n  readFormStateRef: React.MutableRefObject<ReadFormState>,\n  localReadFormStateRef?: React.MutableRefObject<ReadFormState>,\n  isRoot = true,\n) =>\n  isProxyEnabled\n    ? new Proxy(formState, {\n        get: (obj, prop: keyof FormStateProxy) => {\n          if (prop in obj) {\n            if (readFormStateRef.current[prop] !== VALIDATION_MODE.all) {\n              readFormStateRef.current[prop] = isRoot\n                ? VALIDATION_MODE.all\n                : true;\n            }\n            localReadFormStateRef &&\n              (localReadFormStateRef.current[prop] = true);\n            return obj[prop];\n          }\n\n          return undefined;\n        },\n      })\n    : formState;\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport omit from '../utils/omit';\n\nexport default <T extends Record<string, any>, K extends ReadFormState>(\n  formStateData: T,\n  readFormStateRef: K,\n  isRoot?: boolean,\n) => {\n  const formState = omit(formStateData, 'name');\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(readFormStateRef).length ||\n    Object.keys(formState).find(\n      (key) =>\n        readFormStateRef[key as keyof ReadFormState] ===\n        (isRoot ? VALIDATION_MODE.all : true),\n    )\n  );\n};\n","export default <T extends unknown>(value: T) =>\n  Array.isArray(value) ? value : [value];\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import isWeb from './isWeb';\n\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== 'undefined';\n\nexport default isProxyEnabled;\n","import * as React from 'react';\n\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport isProxyEnabled from './utils/isProxyEnabled';\nimport {\n  FieldValues,\n  FormState,\n  InternalFieldName,\n  UseFormStateProps,\n  UseFormStateReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\n\nfunction useFormState<TFieldValues extends FieldValues = FieldValues>(\n  props?: UseFormStateProps<TFieldValues>,\n): UseFormStateReturn<TFieldValues> {\n  const { control, name } = props || {};\n  const methods = useFormContext();\n  const { formStateRef, subjectsRef, readFormStateRef } =\n    control || methods.control;\n  const nameRef = React.useRef<InternalFieldName>(name as InternalFieldName);\n  nameRef.current = name as InternalFieldName;\n\n  const [formState, updateFormState] = React.useState(formStateRef.current);\n  const readFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  });\n\n  React.useEffect(() => {\n    const formStateSubscription = subjectsRef.current.state.subscribe({\n      next: (formState) =>\n        (!nameRef.current ||\n          !formState.name ||\n          convertToArrayPayload(nameRef.current).includes(formState.name)) &&\n        shouldRenderFormState(formState, readFormState.current) &&\n        updateFormState({\n          ...formStateRef.current,\n          ...formState,\n        }),\n    });\n\n    return () => formStateSubscription.unsubscribe();\n  }, []);\n\n  return getProxyFormState<TFieldValues>(\n    isProxyEnabled,\n    formState as FormState<TFieldValues>,\n    readFormStateRef,\n    readFormState,\n    false,\n  );\n}\n\nexport { useFormState };\n","import * as React from 'react';\n\nimport getControllerValue from './logic/getControllerValue';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport get from './utils/get';\nimport isUndefined from './utils/isUndefined';\nimport { EVENTS } from './constants';\nimport {\n  FieldPath,\n  FieldValues,\n  InternalFieldName,\n  UseControllerProps,\n  UseControllerReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useFormState } from './useFormState';\n\nexport function useController<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>({\n  name,\n  rules,\n  defaultValue,\n  control,\n  shouldUnregister,\n}: UseControllerProps<TFieldValues, TName>): UseControllerReturn<\n  TFieldValues,\n  TName\n> {\n  const methods = useFormContext<TFieldValues>();\n  const {\n    defaultValuesRef,\n    register,\n    fieldsRef,\n    unregister,\n    namesRef,\n    subjectsRef,\n    shouldUnmount,\n    inFieldArrayActionRef,\n  } = control || methods.control;\n\n  const isFieldArray = isNameInFieldArray(namesRef.current.array, name);\n  const field = get(fieldsRef.current, name);\n  const [value, setInputStateValue] = React.useState(\n    isFieldArray || !field || !field._f\n      ? isFieldArray || isUndefined(get(defaultValuesRef.current, name))\n        ? defaultValue\n        : get(defaultValuesRef.current, name)\n      : field._f.value,\n  );\n  const { onChange, onBlur, ref } = register(name, {\n    ...rules,\n    value,\n  });\n  const formState = useFormState({\n    control: control || methods.control,\n    name,\n  });\n\n  React.useEffect(() => {\n    const controllerSubscription = subjectsRef.current.control.subscribe({\n      next: (data) =>\n        (!data.name || name === data.name) &&\n        setInputStateValue(get(data.values, name)),\n    });\n\n    return () => {\n      controllerSubscription.unsubscribe();\n      const shouldUnmountField = shouldUnmount || shouldUnregister;\n\n      if (\n        isFieldArray\n          ? shouldUnmountField && !inFieldArrayActionRef.current\n          : shouldUnmountField\n      ) {\n        unregister(name);\n      } else {\n        const field = get(fieldsRef.current, name);\n\n        if (field && field._f) {\n          field._f.mount = false;\n        }\n      }\n    };\n  }, [name]);\n\n  return {\n    field: {\n      onChange: (event: any) => {\n        const value = getControllerValue(event);\n        setInputStateValue(value);\n\n        onChange({\n          target: {\n            value,\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.CHANGE,\n        });\n      },\n      onBlur: () => {\n        onBlur({\n          target: {\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.BLUR,\n        });\n      },\n      name,\n      value,\n      ref: (elm) =>\n        elm &&\n        ref({\n          focus: () => elm.focus && elm.focus(),\n        }),\n    },\n    formState,\n    fieldState: {\n      invalid: !!get(formState.errors, name),\n      isDirty: !!get(formState.dirtyFields, name),\n      isTouched: !!get(formState.touchedFields, name),\n      error: get(formState.errors, name),\n    },\n  };\n}\n","import { ControllerProps, FieldPath, FieldValues } from './types';\nimport { useController } from './useController';\n\nconst Controller = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: ControllerProps<TFieldValues, TName>,\n) => props.render(useController<TFieldValues, TName>(props));\n\nexport { Controller };\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\nimport omit from '../utils/omit';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[],\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","import * as React from 'react';\n\nimport { FieldRefs, FieldValues } from '../types';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport omit from '../utils/omit';\nimport set from '../utils/set';\n\nconst getFieldsValues = (\n  fieldsRef: React.MutableRefObject<FieldRefs>,\n  output: FieldValues = {},\n): any => {\n  for (const name in fieldsRef.current) {\n    const field = fieldsRef.current[name];\n\n    if (field && !isNullOrUndefined(output)) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      set(\n        output,\n        name,\n        _f && _f.ref\n          ? _f.ref.disabled || (_f.refs && _f.refs.every((ref) => ref.disabled))\n            ? undefined\n            : _f.value\n          : Array.isArray(field)\n          ? []\n          : {},\n      );\n\n      current &&\n        getFieldsValues(\n          {\n            current,\n          },\n          output[name],\n        );\n    }\n  }\n\n  return output;\n};\n\nexport default getFieldsValues;\n","export default () => {\n  const d =\n    typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import { FieldValues } from '../types';\n\nimport generateId from './generateId';\n\nexport default <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TKeyName extends string = 'id',\n>(\n  values: Partial<TFieldArrayValues>[] = [],\n  keyName: TKeyName,\n): any =>\n  values.map((value: Partial<TFieldArrayValues>) => ({\n    [keyName]: (value && value[keyName]) || generateId(),\n    ...value,\n  }));\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import * as React from 'react';\n\nimport isObject from '../utils/isObject';\n\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(\n  object1: any,\n  object2: any,\n  isErrorObject?: boolean,\n) {\n  if (\n    isPrimitive(object1) ||\n    isPrimitive(object2) ||\n    object1 instanceof Date ||\n    object2 instanceof Date\n  ) {\n    return object1 === object2;\n  }\n\n  if (!React.isValidElement(object1)) {\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n\n    if (keys1.length !== keys2.length) {\n      return false;\n    }\n\n    for (const key of keys1) {\n      const val1 = object1[key];\n\n      if (!(isErrorObject && key === 'ref')) {\n        const val2 = object2[key];\n\n        if (\n          (isObject(val1) || Array.isArray(val1)) &&\n          (isObject(val2) || Array.isArray(val2))\n            ? !deepEqual(val1, val2, isErrorObject)\n            : val1 !== val2\n        ) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>,\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import { get } from '../utils';\nimport deepEqual from '../utils/deepEqual';\nimport { deepMerge } from '../utils/deepMerge';\nimport set from '../utils/set';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>,\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function append<T>(data: T[], value: T | T[]): T[] {\n  return [...data, ...convertToArrayPayload(value)];\n}\n","export default <T>(value: T | T[]): undefined[] | undefined =>\n  Array.isArray(value) ? Array(value.length).fill(undefined) : undefined;\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function insert<T>(data: T[], index: number): (T | undefined)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | undefined)[] {\n  return [\n    ...data.slice(0, index),\n    ...convertToArrayPayload(value),\n    ...data.slice(index),\n  ];\n}\n","import isUndefined from './isUndefined';\n\nexport default <T>(\n  data: (T | undefined)[],\n  from: number,\n  to: number,\n): (T | undefined)[] => {\n  if (Array.isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n\n  return [];\n};\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function prepend<T>(data: T[], value: T | T[]): T[] {\n  return [...convertToArrayPayload(value), ...data];\n}\n","import compact from './compact';\nimport convertToArrayPayload from './convertToArrayPayload';\nimport isUndefined from './isUndefined';\n\nfunction removeAtIndexes<T>(data: T[], indexes: number[]): T[] {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : removeAtIndexes(\n        data,\n        (convertToArrayPayload(index) as number[]).sort((a, b) => a - b),\n      );\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\n  data[indexA] = [data[indexB], (data[indexB] = data[indexA])][0];\n};\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import isBoolean from './isBoolean';\nimport isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import * as React from 'react';\n\nimport focusFieldBy from './logic/focusFieldBy';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldArrayParentName from './logic/getNodeParentName';\nimport mapIds from './logic/mapId';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport appendAt from './utils/append';\nimport compact from './utils/compact';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport get from './utils/get';\nimport insertAt from './utils/insert';\nimport isPrimitive from './utils/isPrimitive';\nimport moveArrayAt from './utils/move';\nimport omit from './utils/omit';\nimport prependAt from './utils/prepend';\nimport removeArrayAt from './utils/remove';\nimport set from './utils/set';\nimport swapArrayAt from './utils/swap';\nimport unset from './utils/unset';\nimport {\n  FieldArray,\n  FieldArrayMethodProps,\n  FieldArrayPath,\n  FieldArrayWithId,\n  FieldErrors,\n  FieldPath,\n  FieldValues,\n  Path,\n  PathValue,\n  UseFieldArrayProps,\n  UseFieldArrayReturn,\n  UseFormRegister,\n} from './types';\nimport { useFormContext } from './useFormContext';\n\nexport const useFieldArray = <\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldArrayName extends FieldArrayPath<TFieldValues> = FieldArrayPath<TFieldValues>,\n  TKeyName extends string = 'id',\n>({\n  control,\n  name,\n  keyName = 'id' as TKeyName,\n  shouldUnregister,\n}: UseFieldArrayProps<\n  TFieldValues,\n  TFieldArrayName,\n  TKeyName\n>): UseFieldArrayReturn<TFieldValues, TFieldArrayName, TKeyName> => {\n  const methods = useFormContext();\n  const focusNameRef = React.useRef('');\n  const isMountedRef = React.useRef(false);\n  const {\n    getIsDirty,\n    namesRef,\n    fieldsRef,\n    defaultValuesRef,\n    formStateRef,\n    subjectsRef,\n    readFormStateRef,\n    updateIsValid,\n    fieldArrayDefaultValuesRef,\n    unregister,\n    shouldUnmount,\n    inFieldArrayActionRef,\n    register,\n  } = control || methods.control;\n\n  const [fields, setFields] = React.useState<\n    Partial<FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>>[]\n  >(\n    mapIds(\n      (get(fieldsRef.current, name) && isMountedRef.current\n        ? get(getFieldsValues(fieldsRef), name)\n        : get(fieldArrayDefaultValuesRef.current, getFieldArrayParentName(name))\n        ? get(fieldArrayDefaultValuesRef.current, name)\n        : get(defaultValuesRef.current, name)) || [],\n      keyName,\n    ),\n  );\n\n  set(fieldArrayDefaultValuesRef.current, name, [...fields]);\n  namesRef.current.array.add(name);\n\n  const omitKey = <\n    T extends Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[],\n  >(\n    fields: T,\n  ) =>\n    fields.map((field = {}) => omit(field as Record<TKeyName, any>, keyName));\n\n  const getCurrentFieldsValues = () => {\n    const values = get(getFieldsValues(fieldsRef), name, []);\n\n    return mapIds<TFieldValues, TKeyName>(\n      get(fieldArrayDefaultValuesRef.current, name, []).map(\n        (item: Partial<TFieldValues>, index: number) => ({\n          ...item,\n          ...values[index],\n        }),\n      ),\n      keyName,\n    );\n  };\n\n  const getFocusFieldName = (\n    index: number,\n    options?: FieldArrayMethodProps,\n  ): string =>\n    options && !options.shouldFocus\n      ? options.focusName || `${name}.${options.focusIndex}.`\n      : `${name}.${index}.`;\n\n  const setFieldsAndNotify = (\n    fieldsValues: Partial<FieldArray<TFieldValues, TFieldArrayName>>[] = [],\n  ) => setFields(mapIds(fieldsValues, keyName));\n\n  const cleanup = <T>(ref: T) =>\n    !compact(get(ref, name, [])).length && unset(ref, name);\n\n  const batchStateUpdate = <T extends Function>(\n    method: T,\n    args: {\n      argA?: unknown;\n      argB?: unknown;\n    },\n    updatedFieldArrayValues: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = [],\n    shouldSet = true,\n  ) => {\n    inFieldArrayActionRef.current = true;\n    if (get(fieldsRef.current, name)) {\n      const output = method(get(fieldsRef.current, name), args.argA, args.argB);\n      shouldSet && set(fieldsRef.current, name, output);\n    }\n\n    if (Array.isArray(get(formStateRef.current.errors, name))) {\n      const output = method(\n        get(formStateRef.current.errors, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(formStateRef.current.errors, name, output);\n      cleanup(formStateRef.current.errors);\n    }\n\n    if (\n      readFormStateRef.current.touchedFields &&\n      get(formStateRef.current.touchedFields, name)\n    ) {\n      const output = method(\n        get(formStateRef.current.touchedFields, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(formStateRef.current.touchedFields, name, output);\n      cleanup(formStateRef.current.touchedFields);\n    }\n\n    if (\n      readFormStateRef.current.dirtyFields ||\n      readFormStateRef.current.isDirty\n    ) {\n      set(\n        formStateRef.current.dirtyFields,\n        name,\n        setFieldArrayDirtyFields(\n          omitKey(updatedFieldArrayValues),\n          get(defaultValuesRef.current, name, []),\n          get(formStateRef.current.dirtyFields, name, []),\n        ),\n      );\n      updatedFieldArrayValues &&\n        set(\n          formStateRef.current.dirtyFields,\n          name,\n          setFieldArrayDirtyFields(\n            omitKey(updatedFieldArrayValues),\n            get(defaultValuesRef.current, name, []),\n            get(formStateRef.current.dirtyFields, name, []),\n          ),\n        );\n      cleanup(formStateRef.current.dirtyFields);\n    }\n\n    subjectsRef.current.state.next({\n      isDirty: getIsDirty(name, omitKey(updatedFieldArrayValues)),\n      errors: formStateRef.current.errors as FieldErrors<TFieldValues>,\n      isValid: formStateRef.current.isValid,\n    });\n  };\n\n  const registerFieldArray = <T extends Object[]>(\n    values: T,\n    index = 0,\n    parentName = '',\n  ) =>\n    values.forEach((appendValueItem, valueIndex) => {\n      const rootName = `${parentName || name}.${\n        parentName ? valueIndex : index + valueIndex\n      }`;\n      isPrimitive(appendValueItem)\n        ? (register as UseFormRegister<TFieldValues>)(\n            rootName as Path<TFieldValues>,\n            {\n              value: appendValueItem as PathValue<\n                TFieldValues,\n                Path<TFieldValues>\n              >,\n            },\n          )\n        : Object.entries(appendValueItem).forEach(([key, value]) => {\n            const inputName = rootName + '.' + key;\n\n            Array.isArray(value)\n              ? registerFieldArray(value, valueIndex, inputName)\n              : (register as UseFormRegister<TFieldValues>)(\n                  inputName as Path<TFieldValues>,\n                  { value: isPrimitive(value) ? value : { ...value } },\n                );\n          });\n    });\n\n  const append = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const appendValue = convertToArrayPayload(value);\n    const updatedFieldArrayValues = appendAt(\n      getCurrentFieldsValues(),\n      appendValue,\n    );\n    const currentIndex = updatedFieldArrayValues.length - appendValue.length;\n    setFieldsAndNotify(\n      updatedFieldArrayValues as Partial<\n        FieldArray<TFieldValues, TFieldArrayName>\n      >[],\n    );\n    batchStateUpdate(\n      appendAt,\n      {\n        argA: fillEmptyArray(value),\n      },\n      updatedFieldArrayValues as Partial<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >[],\n      false,\n    );\n    registerFieldArray(appendValue, currentIndex);\n\n    focusNameRef.current = getFocusFieldName(currentIndex, options);\n  };\n\n  const prepend = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const prependValue = convertToArrayPayload(value);\n    const updatedFieldArrayValues = prependAt(\n      getCurrentFieldsValues(),\n      prependValue,\n    );\n    setFieldsAndNotify(\n      updatedFieldArrayValues as Partial<\n        FieldArray<TFieldValues, TFieldArrayName>\n      >[],\n    );\n    batchStateUpdate(\n      prependAt,\n      {\n        argA: fillEmptyArray(value),\n      },\n      updatedFieldArrayValues as Partial<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >[],\n    );\n    registerFieldArray(prependValue);\n\n    focusNameRef.current = getFocusFieldName(0, options);\n  };\n\n  const remove = (index?: number | number[]) => {\n    const updatedFieldArrayValues: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = removeArrayAt(getCurrentFieldsValues(), index);\n\n    setFieldsAndNotify(updatedFieldArrayValues);\n\n    batchStateUpdate(\n      removeArrayAt,\n      {\n        argA: index,\n      },\n      updatedFieldArrayValues,\n    );\n  };\n\n  const insert = (\n    index: number,\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const insertValue = convertToArrayPayload(value);\n    const updatedFieldArrayValues = insertAt(\n      getCurrentFieldsValues(),\n      index,\n      insertValue,\n    );\n    setFieldsAndNotify(\n      updatedFieldArrayValues as Partial<\n        FieldArray<TFieldValues, TFieldArrayName>\n      >[],\n    );\n    batchStateUpdate(\n      insertAt,\n      {\n        argA: index,\n        argB: fillEmptyArray(value),\n      },\n      updatedFieldArrayValues as Partial<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >[],\n    );\n    registerFieldArray(insertValue, index);\n\n    focusNameRef.current = getFocusFieldName(index, options);\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    const fieldValues = getCurrentFieldsValues();\n    swapArrayAt(fieldValues, indexA, indexB);\n    batchStateUpdate(\n      swapArrayAt,\n      {\n        argA: indexA,\n        argB: indexB,\n      },\n      fieldValues,\n      false,\n    );\n    setFieldsAndNotify(fieldValues);\n  };\n\n  const move = (from: number, to: number) => {\n    const fieldValues = getCurrentFieldsValues();\n    moveArrayAt(fieldValues, from, to);\n    setFieldsAndNotify(fieldValues);\n    batchStateUpdate(\n      moveArrayAt,\n      {\n        argA: from,\n        argB: to,\n      },\n      fieldValues,\n      false,\n    );\n  };\n\n  React.useEffect(() => {\n    inFieldArrayActionRef.current = false;\n\n    if (namesRef.current.watchAll) {\n      subjectsRef.current.state.next({});\n    } else {\n      for (const watchField of namesRef.current.watch) {\n        if (name.startsWith(watchField)) {\n          subjectsRef.current.state.next({});\n          break;\n        }\n      }\n    }\n\n    subjectsRef.current.watch.next({\n      name,\n      values: getFieldsValues(fieldsRef),\n    });\n\n    focusNameRef.current &&\n      focusFieldBy(fieldsRef.current, (key: string) =>\n        key.startsWith(focusNameRef.current),\n      );\n\n    focusNameRef.current = '';\n\n    subjectsRef.current.array.next({\n      name,\n      values: omitKey([...fields]),\n    });\n\n    readFormStateRef.current.isValid && updateIsValid();\n  }, [fields, name]);\n\n  React.useEffect(() => {\n    const fieldArraySubscription = subjectsRef.current.array.subscribe({\n      next({ name: inputFieldArrayName, values, isReset }) {\n        if (isReset) {\n          unset(fieldsRef.current, inputFieldArrayName || name);\n\n          inputFieldArrayName\n            ? set(\n                fieldArrayDefaultValuesRef.current,\n                inputFieldArrayName,\n                values,\n              )\n            : (fieldArrayDefaultValuesRef.current = values);\n\n          setFieldsAndNotify(get(fieldArrayDefaultValuesRef.current, name));\n        }\n      },\n    });\n    !get(fieldsRef.current, name) && set(fieldsRef.current, name, []);\n    isMountedRef.current = true;\n\n    return () => {\n      fieldArraySubscription.unsubscribe();\n      if (shouldUnmount || shouldUnregister) {\n        unregister(name as FieldPath<TFieldValues>);\n        unset(fieldArrayDefaultValuesRef.current, name);\n      } else {\n        const fieldArrayValues = get(getFieldsValues(fieldsRef), name);\n        fieldArrayValues &&\n          set(fieldArrayDefaultValuesRef.current, name, fieldArrayValues);\n      }\n    };\n  }, []);\n\n  return {\n    swap: React.useCallback(swap, [name]),\n    move: React.useCallback(move, [name]),\n    prepend: React.useCallback(prepend, [name]),\n    append: React.useCallback(append, [name]),\n    remove: React.useCallback(remove, [name]),\n    insert: React.useCallback(insert, [name]),\n    fields: fields as FieldArrayWithId<\n      TFieldValues,\n      TFieldArrayName,\n      TKeyName\n    >[],\n  };\n};\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import { Field } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  value: any,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n    ? value === ''\n      ? NaN\n      : +value\n    : valueAsDate\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(field?: Field) {\n  if (field && field._f) {\n    const ref = field._f.ref;\n\n    if (ref.disabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field._f.refs).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field._f.refs).value;\n    }\n\n    return getFieldValueAs(\n      isUndefined(ref.value) ? field._f.ref.value : ref.value,\n      field._f,\n    );\n  }\n}\n","import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  fieldsRefs: FieldRefs,\n  criteriaMode?: CriteriaMode,\n  shouldUseNativeValidation?: boolean | undefined,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field = get(fieldsRefs, name) as Field;\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n    shouldUseNativeValidation,\n  };\n};\n","import { RegisterOptions } from '../types';\n\nexport default <T extends RegisterOptions>(options?: T, mounted?: boolean) =>\n  mounted &&\n  options &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","export default (value: unknown): value is string => typeof value === 'string';\n","import * as React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport { Field, FieldError, InternalFieldErrors, Message } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async (\n  {\n    _f: {\n      ref,\n      refs,\n      required,\n      maxLength,\n      minLength,\n      min,\n      max,\n      pattern,\n      validate,\n      name,\n      value: inputValue,\n      valueAsNumber,\n      mount,\n    },\n  }: Field,\n  validateAllFieldCriteria: boolean,\n  shouldUseNativeValidation?: boolean,\n): Promise<InternalFieldErrors> => {\n  if (!mount) {\n    return {};\n  }\n  const inputRef: HTMLInputElement = refs ? refs[0] : (ref as HTMLInputElement);\n  const setCustomValidty = (message?: string | boolean) => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          setCustomValidty(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(\n          await validate[key](inputValue),\n          inputRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          setCustomValidty(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: inputRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidty(true);\n  return error;\n};\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","export type Observer<T> = {\n  next: (value: T) => void;\n};\n\ntype TearDown = () => void;\n\nexport type SubjectType<T> = {\n  next: (value: T) => void;\n  subscribe: (value: Observer<T>) => {\n    unsubscribe: TearDown;\n  };\n};\n\nexport class Subscription {\n  private tearDowns: TearDown[] = [];\n\n  add(tearDown: TearDown) {\n    this.tearDowns.push(tearDown);\n  }\n\n  unsubscribe() {\n    for (const teardown of this.tearDowns) {\n      teardown();\n    }\n    this.tearDowns = [];\n  }\n}\n\nclass Subscriber<T> implements Observer<T> {\n  closed = false;\n\n  constructor(private observer: Observer<T>, subscription: Subscription) {\n    subscription.add(() => (this.closed = true));\n  }\n\n  next(value: T) {\n    if (!this.closed) {\n      this.observer.next(value);\n    }\n  }\n}\n\nexport default class Subject<T> {\n  observers: Observer<T>[];\n\n  constructor() {\n    this.observers = [];\n  }\n\n  next(value: T) {\n    for (const observer of this.observers) {\n      observer.next(value);\n    }\n  }\n\n  subscribe(observer: Observer<T>) {\n    const subscription = new Subscription();\n    const subscriber = new Subscriber(observer, subscription);\n    this.observers.push(subscriber);\n\n    return subscription;\n  }\n\n  unsubscribe() {\n    this.observers = [];\n  }\n}\n","import * as React from 'react';\n\nimport focusFieldBy from './logic/focusFieldBy';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport getFieldValueAs from './logic/getFieldValueAs';\nimport getNodeParentName from './logic/getNodeParentName';\nimport getProxyFormState from './logic/getProxyFormState';\nimport getResolverOptions from './logic/getResolverOptions';\nimport hasValidation from './logic/hasValidation';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport skipValidation from './logic/skipValidation';\nimport validateField from './logic/validateField';\nimport compact from './utils/compact';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport deepEqual from './utils/deepEqual';\nimport get from './utils/get';\nimport getValidationModes from './utils/getValidationModes';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isFileInput from './utils/isFileInput';\nimport isFunction from './utils/isFunction';\nimport isHTMLElement from './utils/isHTMLElement';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isObject from './utils/isObject';\nimport isPrimitive from './utils/isPrimitive';\nimport isProxyEnabled from './utils/isProxyEnabled';\nimport isRadioInput from './utils/isRadioInput';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isString from './utils/isString';\nimport isUndefined from './utils/isUndefined';\nimport isWeb from './utils/isWeb';\nimport omit from './utils/omit';\nimport set from './utils/set';\nimport Subject from './utils/Subject';\nimport unset from './utils/unset';\nimport { EVENTS, VALIDATION_MODE } from './constants';\nimport {\n  ChangeHandler,\n  DeepPartial,\n  DefaultValues,\n  Field,\n  FieldArrayDefaultValues,\n  FieldError,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  PathValue,\n  ReadFormState,\n  Ref,\n  RegisterOptions,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UnpackNestedValue,\n  UseFormClearErrors,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormRegisterReturn,\n  UseFormReset,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from './types';\n\nconst isWindowUndefined = typeof window === 'undefined';\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as DefaultValues<TFieldValues>,\n  shouldFocusError = true,\n  shouldUseNativeValidation,\n  shouldUnregister,\n  criteriaMode,\n}: UseFormProps<TFieldValues, TContext> = {}): UseFormReturn<TFieldValues> {\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {},\n  });\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touchedFields: !isProxyEnabled,\n    isValidating: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n    errors: !isProxyEnabled,\n  });\n  const resolverRef = React.useRef(resolver);\n  const formStateRef = React.useRef(formState);\n  const fieldsRef = React.useRef<FieldRefs>({});\n  const defaultValuesRef =\n    React.useRef<DefaultValues<TFieldValues>>(defaultValues);\n  const fieldArrayDefaultValuesRef = React.useRef<FieldArrayDefaultValues>({});\n  const contextRef = React.useRef(context);\n  const inFieldArrayActionRef = React.useRef(false);\n  const isMountedRef = React.useRef(false);\n  const subjectsRef: Subjects<TFieldValues> = React.useRef({\n    watch: new Subject(),\n    control: new Subject(),\n    array: new Subject(),\n    state: new Subject(),\n  });\n  const namesRef = React.useRef<Names>({\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n    watchAll: false,\n  });\n\n  const validationMode = getValidationModes(mode);\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  resolverRef.current = resolver;\n  contextRef.current = context;\n\n  const isFieldWatched = (name: FieldPath<TFieldValues>) =>\n    namesRef.current.watchAll ||\n    namesRef.current.watch.has(name) ||\n    namesRef.current.watch.has((name.match(/\\w+/) || [])[0]);\n\n  const shouldRenderBaseOnError = React.useCallback(\n    async (\n      shouldSkipRender: boolean,\n      name: InternalFieldName,\n      error?: FieldError,\n      inputState?: {\n        dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n        isDirty?: boolean;\n        touched?: FieldNamesMarkedBoolean<TFieldValues>;\n      },\n      isValidFromResolver?: boolean,\n      isWatched?: boolean,\n    ): Promise<void> => {\n      const previousError = get(formStateRef.current.errors, name);\n      const isValid = readFormStateRef.current.isValid\n        ? resolver\n          ? isValidFromResolver\n          : await validateForm(fieldsRef.current, true)\n        : false;\n\n      error\n        ? set(formStateRef.current.errors, name, error)\n        : unset(formStateRef.current.errors, name);\n\n      if (\n        (isWatched ||\n          (error ? !deepEqual(previousError, error, true) : previousError) ||\n          !isEmptyObject(inputState) ||\n          formStateRef.current.isValid !== isValid) &&\n        !shouldSkipRender\n      ) {\n        const updatedFormState = {\n          ...inputState,\n          isValid: !!isValid,\n          errors: formStateRef.current.errors,\n          name,\n        };\n\n        formStateRef.current = {\n          ...formStateRef.current,\n          ...updatedFormState,\n        };\n\n        subjectsRef.current.state.next(isWatched ? { name } : updatedFormState);\n      }\n\n      subjectsRef.current.state.next({\n        isValidating: false,\n      });\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (\n      name: InternalFieldName,\n      rawValue: SetFieldValue<TFieldValues>,\n      options: SetValueConfig = {},\n      shouldRender?: boolean,\n      shouldRegister?: boolean,\n    ) => {\n      shouldRegister && register(name as Path<TFieldValues>);\n      const field = get(fieldsRef.current, name);\n\n      if (field) {\n        const _f = (field as Field)._f;\n\n        if (_f) {\n          const value =\n            isWeb && isHTMLElement(_f.ref) && isNullOrUndefined(rawValue)\n              ? ''\n              : rawValue;\n          _f.value = getFieldValueAs(rawValue, _f);\n\n          if (isRadioInput(_f.ref)) {\n            (_f.refs || []).forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === value),\n            );\n          } else if (isFileInput(_f.ref) && !isString(value)) {\n            _f.ref.files = value as FileList;\n          } else if (isMultipleSelect(_f.ref)) {\n            [..._f.ref.options].forEach(\n              (selectRef) =>\n                (selectRef.selected = (value as string[]).includes(\n                  selectRef.value,\n                )),\n            );\n          } else if (isCheckBoxInput(_f.ref) && _f.refs) {\n            _f.refs.length > 1\n              ? _f.refs.forEach(\n                  (checkboxRef) =>\n                    (checkboxRef.checked = Array.isArray(value)\n                      ? !!(value as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : value === checkboxRef.value),\n                )\n              : (_f.refs[0].checked = !!value);\n          } else {\n            _f.ref.value = value;\n          }\n\n          if (shouldRender) {\n            const values = getFieldsValues(fieldsRef);\n            set(values, name, rawValue);\n            subjectsRef.current.control.next({\n              values: {\n                ...defaultValuesRef.current,\n                ...values,\n              } as DefaultValues<TFieldValues>,\n              name,\n            });\n          }\n\n          (options.shouldDirty || options.shouldTouch) &&\n            updateTouchAndDirtyState(name, value, options.shouldTouch);\n          options.shouldValidate && trigger(name as Path<TFieldValues>);\n        } else {\n          field._f = {\n            ref: {\n              name,\n              value: rawValue,\n            },\n            value: rawValue,\n          };\n        }\n      }\n    },\n    [],\n  );\n\n  const getIsDirty: GetIsDirty = React.useCallback((name, data) => {\n    const formValues = getFieldsValues(fieldsRef);\n\n    name && data && set(formValues, name, data);\n\n    return !deepEqual(formValues, defaultValuesRef.current);\n  }, []);\n\n  const updateTouchAndDirtyState = React.useCallback(\n    (\n      name: InternalFieldName,\n      inputValue: unknown,\n      isCurrentTouched?: boolean,\n      shouldRender = true,\n    ): Partial<\n      Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n    > => {\n      const state: Partial<FormState<TFieldValues>> & { name: string } = {\n        name,\n      };\n      let isChanged = false;\n\n      if (readFormStateRef.current.isDirty) {\n        const previousIsDirty = formStateRef.current.isDirty;\n        formStateRef.current.isDirty = getIsDirty();\n        state.isDirty = formStateRef.current.isDirty;\n        isChanged = previousIsDirty !== state.isDirty;\n      }\n\n      if (readFormStateRef.current.dirtyFields && !isCurrentTouched) {\n        const isPreviousFieldDirty = get(\n          formStateRef.current.dirtyFields,\n          name,\n        );\n        const isCurrentFieldDirty = !deepEqual(\n          get(defaultValuesRef.current, name),\n          inputValue,\n        );\n        isCurrentFieldDirty\n          ? set(formStateRef.current.dirtyFields, name, true)\n          : unset(formStateRef.current.dirtyFields, name);\n        state.dirtyFields = formStateRef.current.dirtyFields;\n        isChanged =\n          isChanged ||\n          isPreviousFieldDirty !== get(formStateRef.current.dirtyFields, name);\n      }\n\n      const isPreviousFieldTouched = get(\n        formStateRef.current.touchedFields,\n        name,\n      );\n\n      if (isCurrentTouched && !isPreviousFieldTouched) {\n        set(formStateRef.current.touchedFields, name, isCurrentTouched);\n        state.touchedFields = formStateRef.current.touchedFields;\n        isChanged =\n          isChanged ||\n          (readFormStateRef.current.touchedFields &&\n            isPreviousFieldTouched !== isCurrentTouched);\n      }\n\n      isChanged && shouldRender && subjectsRef.current.state.next(state);\n\n      return isChanged ? state : {};\n    },\n    [],\n  );\n\n  const executeInlineValidation = React.useCallback(\n    async (\n      name: InternalFieldName,\n      skipReRender: boolean,\n    ): Promise<boolean> => {\n      const error = (\n        await validateField(\n          get(fieldsRef.current, name) as Field,\n          isValidateAllFieldCriteria,\n          shouldUseNativeValidation,\n        )\n      )[name];\n\n      shouldRenderBaseOnError(skipReRender, name, error);\n\n      return isUndefined(error);\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const executeResolverValidation = React.useCallback(\n    async (names?: InternalFieldName[]) => {\n      const { errors } = await resolverRef.current!(\n        getFieldsValues(fieldsRef),\n        contextRef.current,\n        getResolverOptions(\n          namesRef.current.mount,\n          fieldsRef.current,\n          criteriaMode,\n          shouldUseNativeValidation,\n        ),\n      );\n\n      if (names) {\n        for (const name of names) {\n          const error = get(errors, name);\n          error\n            ? set(formStateRef.current.errors, name, error)\n            : unset(formStateRef.current.errors, name);\n        }\n      } else {\n        formStateRef.current.errors = errors;\n      }\n\n      return errors;\n    },\n    [criteriaMode, shouldUseNativeValidation],\n  );\n\n  const validateForm = async (\n    fieldsRef: FieldRefs,\n    shouldCheckValid?: boolean,\n    context = {\n      valid: true,\n    },\n  ) => {\n    for (const name in fieldsRef) {\n      const field = fieldsRef[name];\n\n      if (field) {\n        const _f = field._f;\n        const current = omit(field, '_f');\n\n        if (_f) {\n          const fieldError = await validateField(\n            field,\n            isValidateAllFieldCriteria,\n            shouldUseNativeValidation,\n          );\n\n          if (shouldCheckValid) {\n            if (fieldError[_f.name]) {\n              context.valid = false;\n              break;\n            }\n          } else {\n            fieldError[_f.name]\n              ? set(formStateRef.current.errors, _f.name, fieldError[_f.name])\n              : unset(formStateRef.current.errors, _f.name);\n          }\n        }\n\n        current && (await validateForm(current, shouldCheckValid, context));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = React.useCallback(\n    async (name, options = {}) => {\n      const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n      let isValid;\n\n      subjectsRef.current.state.next({\n        isValidating: true,\n      });\n\n      if (resolver) {\n        const schemaResult = await executeResolverValidation(\n          isUndefined(name) ? name : fieldNames,\n        );\n        isValid = name\n          ? fieldNames.every((name) => !get(schemaResult, name))\n          : isEmptyObject(schemaResult);\n      } else {\n        if (name) {\n          isValid = (\n            await Promise.all(\n              fieldNames\n                .filter((fieldName) => get(fieldsRef.current, fieldName, {})._f)\n                .map(\n                  async (fieldName) =>\n                    await executeInlineValidation(fieldName, true),\n                ),\n            )\n          ).every(Boolean);\n        } else {\n          await validateForm(fieldsRef.current);\n          isValid = isEmptyObject(formStateRef.current.errors);\n        }\n      }\n\n      subjectsRef.current.state.next({\n        ...(isString(name) ? { name } : {}),\n        errors: formStateRef.current.errors,\n        isValidating: false,\n      });\n\n      if (options.shouldFocus && !isValid) {\n        focusFieldBy(\n          fieldsRef.current,\n          (key) => get(formStateRef.current.errors, key),\n          fieldNames,\n        );\n      }\n\n      readFormStateRef.current.isValid && updateIsValid();\n\n      return isValid;\n    },\n    [executeResolverValidation, executeInlineValidation],\n  );\n\n  const updateIsValidAndInputValue = (name: InternalFieldName, ref?: Ref) => {\n    const field = get(fieldsRef.current, name) as Field;\n\n    if (field) {\n      const isValueUndefined = isUndefined(field._f.value);\n      const defaultValue = isValueUndefined\n        ? get(defaultValuesRef.current, name)\n        : field._f.value;\n\n      if (!isUndefined(defaultValue)) {\n        if (ref && (ref as HTMLInputElement).defaultChecked) {\n          field._f.value = getFieldValue(field);\n        } else if (isNameInFieldArray(namesRef.current.array, name)) {\n          field._f.value = defaultValue;\n        } else {\n          setFieldValue(name, defaultValue);\n        }\n      } else if (isValueUndefined) {\n        field._f.value = getFieldValue(field);\n      }\n    }\n\n    isMountedRef.current && readFormStateRef.current.isValid && updateIsValid();\n  };\n\n  const updateIsValid = React.useCallback(\n    async (values = {}) => {\n      const isValid = resolver\n        ? isEmptyObject(\n            (\n              await resolverRef.current!(\n                {\n                  ...getFieldsValues(fieldsRef),\n                  ...values,\n                },\n                contextRef.current,\n                getResolverOptions(\n                  namesRef.current.mount,\n                  fieldsRef.current,\n                  criteriaMode,\n                  shouldUseNativeValidation,\n                ),\n              )\n            ).errors,\n          )\n        : await validateForm(fieldsRef.current, true);\n\n      isValid !== formStateRef.current.isValid &&\n        subjectsRef.current.state.next({\n          isValid,\n        });\n    },\n    [criteriaMode, shouldUseNativeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    (\n      name: FieldPath<TFieldValues>,\n      value: UnpackNestedValue<\n        PathValue<TFieldValues, FieldPath<TFieldValues>>\n      >,\n      options: SetValueConfig,\n    ) =>\n      Object.entries(value).forEach(([inputKey, inputValue]) => {\n        const fieldName = `${name}.${inputKey}` as Path<TFieldValues>;\n        const field = get(fieldsRef.current, fieldName);\n        const isFieldArray = namesRef.current.array.has(name);\n\n        isFieldArray || !isPrimitive(inputValue) || (field && !field._f)\n          ? setInternalValues(\n              fieldName,\n              inputValue as SetFieldValue<TFieldValues>,\n              options,\n            )\n          : setFieldValue(\n              fieldName,\n              inputValue as SetFieldValue<TFieldValues>,\n              options,\n              true,\n              !field,\n            );\n      }),\n    [trigger],\n  );\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(fieldsRef.current, name);\n    const isFieldArray = namesRef.current.array.has(name);\n\n    if (isFieldArray) {\n      subjectsRef.current.array.next({\n        values: value,\n        name,\n        isReset: true,\n      });\n\n      if (\n        (readFormStateRef.current.isDirty ||\n          readFormStateRef.current.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        set(\n          formStateRef.current.dirtyFields,\n          name,\n          setFieldArrayDirtyFields(\n            value,\n            get(defaultValuesRef.current, name, []),\n            get(formStateRef.current.dirtyFields, name, []),\n          ),\n        );\n\n        subjectsRef.current.state.next({\n          name,\n          dirtyFields: formStateRef.current.dirtyFields,\n          isDirty: getIsDirty(name, value),\n        });\n      }\n\n      !(value as []).length &&\n        set(fieldsRef.current, name, []) &&\n        set(fieldArrayDefaultValuesRef.current, name, []);\n    }\n\n    ((field && !field._f) || isFieldArray) && !isNullOrUndefined(value)\n      ? setInternalValues(name, value, isFieldArray ? {} : options)\n      : setFieldValue(name, value, options, true, !field);\n\n    isFieldWatched(name) && subjectsRef.current.state.next({});\n    subjectsRef.current.watch.next({ name, values: getValues() });\n  };\n\n  const handleChange: ChangeHandler = React.useCallback(\n    async ({ type, target, target: { value, type: inputType } }) => {\n      let name = (target as Ref)!.name;\n      let error;\n      let isValid;\n      const field = get(fieldsRef.current, name) as Field;\n\n      if (field) {\n        let inputValue = inputType ? getFieldValue(field) : undefined;\n        inputValue = isUndefined(inputValue) ? value : inputValue;\n\n        const isBlurEvent = type === EVENTS.BLUR;\n        const {\n          isOnBlur: isReValidateOnBlur,\n          isOnChange: isReValidateOnChange,\n        } = getValidationModes(reValidateMode);\n\n        const shouldSkipValidation =\n          (!hasValidation(field._f, field._f.mount) &&\n            !resolver &&\n            !get(formStateRef.current.errors, name)) ||\n          skipValidation({\n            isBlurEvent,\n            isTouched: !!get(formStateRef.current.touchedFields, name),\n            isSubmitted: formStateRef.current.isSubmitted,\n            isReValidateOnBlur,\n            isReValidateOnChange,\n            ...validationMode,\n          });\n        const isWatched =\n          !isBlurEvent && isFieldWatched(name as FieldPath<TFieldValues>);\n\n        if (!isUndefined(inputValue)) {\n          field._f.value = inputValue;\n        }\n\n        const inputState = updateTouchAndDirtyState(\n          name,\n          field._f.value,\n          isBlurEvent,\n          false,\n        );\n\n        const shouldRender = !isEmptyObject(inputState) || isWatched;\n\n        if (shouldSkipValidation) {\n          !isBlurEvent &&\n            subjectsRef.current.watch.next({\n              name,\n              type,\n              values: getValues(),\n            });\n          return (\n            shouldRender &&\n            subjectsRef.current.state.next(\n              isWatched ? { name } : { ...inputState, name },\n            )\n          );\n        }\n\n        subjectsRef.current.state.next({\n          isValidating: true,\n        });\n\n        if (resolver) {\n          const { errors } = await resolverRef.current!(\n            getFieldsValues(fieldsRef),\n            contextRef.current,\n            getResolverOptions(\n              [name],\n              fieldsRef.current,\n              criteriaMode,\n              shouldUseNativeValidation,\n            ),\n          );\n          error = get(errors, name);\n\n          if (isCheckBoxInput(target as Ref) && !error) {\n            const parentNodeName = getNodeParentName(name);\n            const currentError = get(errors, parentNodeName, {});\n            currentError.type && currentError.message && (error = currentError);\n\n            if (\n              currentError ||\n              get(formStateRef.current.errors, parentNodeName)\n            ) {\n              name = parentNodeName;\n            }\n          }\n\n          isValid = isEmptyObject(errors);\n        } else {\n          error = (\n            await validateField(\n              field,\n              isValidateAllFieldCriteria,\n              shouldUseNativeValidation,\n            )\n          )[name];\n        }\n\n        !isBlurEvent &&\n          subjectsRef.current.watch.next({\n            name,\n            type,\n            values: getValues(),\n          });\n        shouldRenderBaseOnError(\n          false,\n          name,\n          error,\n          inputState,\n          isValid,\n          isWatched,\n        );\n      }\n    },\n    [],\n  );\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ...defaultValuesRef.current,\n      ...getFieldsValues(fieldsRef),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name\n      ? convertToArrayPayload(name).forEach((inputName) =>\n          unset(formStateRef.current.errors, inputName),\n        )\n      : (formStateRef.current.errors = {});\n\n    subjectsRef.current.state.next({\n      errors: formStateRef.current.errors,\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = (\n      ((get(fieldsRef.current, name) as Field) || { _f: {} })._f || {}\n    ).ref;\n\n    set(formStateRef.current.errors, name, {\n      ...error,\n      ref,\n    });\n\n    subjectsRef.current.state.next({\n      name,\n      errors: formStateRef.current.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watchInternal: WatchInternal<TFieldValues> = React.useCallback(\n    (fieldNames, defaultValue, isGlobal, formValues) => {\n      const isArrayNames = Array.isArray(fieldNames);\n      const fieldValues =\n        formValues || isMountedRef.current\n          ? {\n              ...defaultValuesRef.current,\n              ...(formValues || getFieldsValues(fieldsRef)),\n            }\n          : isUndefined(defaultValue)\n          ? defaultValuesRef.current\n          : isArrayNames\n          ? defaultValue\n          : { [fieldNames as InternalFieldName]: defaultValue };\n\n      if (isUndefined(fieldNames)) {\n        isGlobal && (namesRef.current.watchAll = true);\n        return fieldValues;\n      }\n\n      const result = [];\n\n      for (const fieldName of convertToArrayPayload(fieldNames)) {\n        isGlobal && namesRef.current.watch.add(fieldName as InternalFieldName);\n        result.push(get(fieldValues, fieldName as InternalFieldName));\n      }\n\n      return isArrayNames ? result : result[0];\n    },\n    [],\n  );\n\n  const watch: UseFormWatch<TFieldValues> = (\n    fieldName?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(fieldName)\n      ? subjectsRef.current.watch.subscribe({\n          next: (info) =>\n            fieldName(\n              watchInternal(\n                undefined,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ) as UnpackNestedValue<TFieldValues>,\n              info,\n            ),\n        })\n      : watchInternal(\n          fieldName as InternalFieldName | InternalFieldName[],\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const inputName of name\n      ? convertToArrayPayload(name)\n      : namesRef.current.mount) {\n      namesRef.current.mount.delete(inputName);\n      namesRef.current.array.delete(inputName);\n\n      if (get(fieldsRef.current, inputName) as Field) {\n        !options.keepError && unset(formStateRef.current.errors, inputName);\n        !options.keepValue && unset(fieldsRef.current, inputName);\n        !options.keepDirty &&\n          unset(formStateRef.current.dirtyFields, inputName);\n        !options.keepTouched &&\n          unset(formStateRef.current.touchedFields, inputName);\n        !options.keepDefaultValue && unset(defaultValuesRef.current, inputName);\n\n        subjectsRef.current.watch.next({\n          name: inputName,\n          values: getValues(),\n        });\n      }\n    }\n\n    subjectsRef.current.state.next({\n      ...formStateRef.current,\n      ...(!options.keepDirty ? {} : { isDirty: getIsDirty() }),\n    });\n    !options.keepIsValid && updateIsValid();\n  };\n\n  const registerFieldRef = (\n    name: InternalFieldName,\n    ref: HTMLInputElement,\n    options?: RegisterOptions,\n  ): ((name: InternalFieldName) => void) | void => {\n    register(name as FieldPath<TFieldValues>, options);\n    let field = get(fieldsRef.current, name) as Field;\n\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n\n    if (\n      ref === field._f.ref ||\n      (isRadioOrCheckbox &&\n        compact(field._f.refs || []).find((option) => option === ref))\n    ) {\n      return;\n    }\n\n    field = {\n      _f: isRadioOrCheckbox\n        ? {\n            ...field._f,\n            refs: [\n              ...compact(field._f.refs || []).filter(\n                (ref) => isHTMLElement(ref) && document.contains(ref),\n              ),\n              ref,\n            ],\n            ref: { type: ref.type, name },\n          }\n        : {\n            ...field._f,\n            ref,\n          },\n    };\n\n    set(fieldsRef.current, name, field);\n\n    updateIsValidAndInputValue(name, ref);\n  };\n\n  const register: UseFormRegister<TFieldValues> = React.useCallback(\n    (name, options = {}) => {\n      const field = get(fieldsRef.current, name);\n\n      set(fieldsRef.current, name, {\n        _f: {\n          ...(field && field._f ? field._f : { ref: { name } }),\n          name,\n          mount: true,\n          ...options,\n        },\n      });\n      namesRef.current.mount.add(name);\n      !field && updateIsValidAndInputValue(name);\n\n      return isWindowUndefined\n        ? ({ name: name as InternalFieldName } as UseFormRegisterReturn)\n        : {\n            name,\n            onChange: handleChange,\n            onBlur: handleChange,\n            ref: (ref: HTMLInputElement | null): void => {\n              if (ref) {\n                registerFieldRef(name, ref, options);\n              } else {\n                const field = get(fieldsRef.current, name, {}) as Field;\n                const shouldUnmount =\n                  shouldUnregister || options.shouldUnregister;\n\n                if (field._f) {\n                  field._f.mount = false;\n                  // If initial state of field element is disabled,\n                  // value is not set on first \"register\"\n                  // re-sync the value in when it switched to enabled\n                  if (isUndefined(field._f.value)) {\n                    field._f.value = field._f.ref.value;\n                  }\n                }\n\n                shouldUnmount &&\n                  !(\n                    isNameInFieldArray(namesRef.current.array, name) &&\n                    inFieldArrayActionRef.current\n                  ) &&\n                  namesRef.current.unMount.add(name);\n              }\n            },\n          };\n    },\n    [],\n  );\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> = React.useCallback(\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let hasNoPromiseError = true;\n      let fieldValues = getFieldsValues(fieldsRef);\n\n      subjectsRef.current.state.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (resolver) {\n          const { errors, values } = await resolverRef.current!(\n            fieldValues,\n            contextRef.current,\n            getResolverOptions(\n              namesRef.current.mount,\n              fieldsRef.current,\n              criteriaMode,\n              shouldUseNativeValidation,\n            ),\n          );\n          formStateRef.current.errors = errors;\n          fieldValues = values;\n        } else {\n          await validateForm(fieldsRef.current);\n        }\n\n        if (\n          isEmptyObject(formStateRef.current.errors) &&\n          Object.keys(formStateRef.current.errors).every((name) =>\n            get(fieldValues, name),\n          )\n        ) {\n          subjectsRef.current.state.next({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          onInvalid && (await onInvalid(formStateRef.current.errors, e));\n          shouldFocusError &&\n            focusFieldBy(\n              fieldsRef.current,\n              (key) => get(formStateRef.current.errors, key),\n              namesRef.current.mount,\n            );\n        }\n      } catch (err) {\n        hasNoPromiseError = false;\n        throw err;\n      } finally {\n        formStateRef.current.isSubmitted = true;\n        subjectsRef.current.state.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful:\n            isEmptyObject(formStateRef.current.errors) && hasNoPromiseError,\n          submitCount: formStateRef.current.submitCount + 1,\n          errors: formStateRef.current.errors,\n        });\n      }\n    },\n    [\n      shouldFocusError,\n      isValidateAllFieldCriteria,\n      criteriaMode,\n      shouldUseNativeValidation,\n    ],\n  );\n\n  const registerAbsentFields = <T extends DefaultValues<TFieldValues>>(\n    defaultValues: T,\n    name = '',\n  ): void => {\n    for (const key in defaultValues) {\n      const value = defaultValues[key];\n      const fieldName = name + (name ? '.' : '') + key;\n      const field = get(fieldsRef.current, fieldName);\n\n      if (!field || !field._f) {\n        if (isObject(value) || Array.isArray(value)) {\n          registerAbsentFields(value, fieldName);\n        } else if (!field) {\n          register(fieldName as Path<TFieldValues>, { value });\n        }\n      }\n    }\n  };\n\n  const reset: UseFormReset<TFieldValues> = (values, keepStateOptions = {}) => {\n    const updatedValues = values || defaultValuesRef.current;\n\n    if (isWeb && !keepStateOptions.keepValues) {\n      for (const name of namesRef.current.mount) {\n        const field = get(fieldsRef.current, name);\n        if (field && field._f) {\n          const inputRef = Array.isArray(field._f.refs)\n            ? field._f.refs[0]\n            : field._f.ref;\n\n          try {\n            isHTMLElement(inputRef) && inputRef.closest('form')!.reset();\n            break;\n          } catch {}\n        }\n      }\n    }\n\n    !keepStateOptions.keepDefaultValues &&\n      (defaultValuesRef.current = { ...updatedValues });\n\n    if (!keepStateOptions.keepValues) {\n      fieldsRef.current = {};\n\n      subjectsRef.current.control.next({\n        values: keepStateOptions.keepDefaultValues\n          ? defaultValuesRef.current\n          : { ...updatedValues },\n      });\n\n      subjectsRef.current.watch.next({\n        values: { ...updatedValues },\n      });\n\n      subjectsRef.current.array.next({\n        values: { ...updatedValues },\n        isReset: true,\n      });\n    }\n\n    namesRef.current = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n    };\n\n    subjectsRef.current.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? formStateRef.current.submitCount\n        : 0,\n      isDirty: keepStateOptions.keepDirty\n        ? formStateRef.current.isDirty\n        : keepStateOptions.keepDefaultValues\n        ? deepEqual(values, defaultValuesRef.current)\n        : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? formStateRef.current.isSubmitted\n        : false,\n      dirtyFields: keepStateOptions.keepDirty\n        ? formStateRef.current.dirtyFields\n        : {},\n      touchedFields: keepStateOptions.keepTouched\n        ? formStateRef.current.touchedFields\n        : {},\n      errors: keepStateOptions.keepErrors ? formStateRef.current.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n\n    isMountedRef.current = !!keepStateOptions.keepIsValid;\n  };\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name) =>\n    get(fieldsRef.current, name)._f.ref.focus();\n\n  React.useEffect(() => {\n    const formStateSubscription = subjectsRef.current.state.subscribe({\n      next(formState) {\n        if (shouldRenderFormState(formState, readFormStateRef.current, true)) {\n          formStateRef.current = {\n            ...formStateRef.current,\n            ...formState,\n          };\n          updateFormState(formStateRef.current);\n        }\n      },\n    });\n\n    const useFieldArraySubscription = subjectsRef.current.array.subscribe({\n      next(state) {\n        if (state.values && state.name && readFormStateRef.current.isValid) {\n          const values = getFieldsValues(fieldsRef);\n          set(values, state.name, state.values);\n          updateIsValid(values);\n        }\n      },\n    });\n\n    return () => {\n      formStateSubscription.unsubscribe();\n      useFieldArraySubscription.unsubscribe();\n    };\n  }, []);\n\n  React.useEffect(() => {\n    const isLiveInDom = (ref: Ref) =>\n      !isHTMLElement(ref) || !document.contains(ref);\n\n    if (!isMountedRef.current) {\n      isMountedRef.current = true;\n      readFormStateRef.current.isValid && updateIsValid();\n      !shouldUnregister && registerAbsentFields(defaultValuesRef.current);\n    }\n\n    for (const name of namesRef.current.unMount) {\n      const field = get(fieldsRef.current, name) as Field;\n\n      field &&\n        (field._f.refs\n          ? field._f.refs.every(isLiveInDom)\n          : isLiveInDom(field._f.ref)) &&\n        unregister(name as FieldPath<TFieldValues>);\n    }\n\n    namesRef.current.unMount = new Set();\n  });\n\n  return {\n    control: React.useMemo(\n      () => ({\n        register,\n        inFieldArrayActionRef,\n        getIsDirty,\n        subjectsRef,\n        watchInternal,\n        fieldsRef,\n        updateIsValid,\n        namesRef,\n        readFormStateRef,\n        formStateRef,\n        defaultValuesRef,\n        fieldArrayDefaultValuesRef,\n        unregister,\n        shouldUnmount: shouldUnregister,\n      }),\n      [],\n    ),\n    formState: getProxyFormState<TFieldValues>(\n      isProxyEnabled,\n      formState,\n      readFormStateRef,\n    ),\n    trigger,\n    register,\n    handleSubmit,\n    watch: React.useCallback(watch, []),\n    setValue: React.useCallback(setValue, [setInternalValues]),\n    getValues: React.useCallback(getValues, []),\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    unregister: React.useCallback(unregister, []),\n    setError: React.useCallback(setError, []),\n    setFocus: React.useCallback(setFocus, []),\n  };\n}\n","import * as React from 'react';\n\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport isUndefined from './utils/isUndefined';\nimport {\n  Control,\n  DeepPartial,\n  FieldPath,\n  FieldPathValue,\n  FieldPathValues,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n  UseWatchProps,\n} from './types';\nimport { useFormContext } from './useFormContext';\n\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n>(props: {\n  defaultValue?: UnpackNestedValue<DeepPartial<TFieldValues>>;\n  control?: Control<TFieldValues>;\n}): UnpackNestedValue<DeepPartial<TFieldValues>>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(props: {\n  name: TName;\n  defaultValue?: FieldPathValue<TFieldValues, TName>;\n  control?: Control<TFieldValues>;\n}): FieldPathValue<TFieldValues, TName>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues>[] = FieldPath<TFieldValues>[],\n>(props: {\n  name: TName;\n  defaultValue?: UnpackNestedValue<DeepPartial<TFieldValues>>;\n  control?: Control<TFieldValues>;\n}): FieldPathValues<TFieldValues, TName>;\nexport function useWatch<TFieldValues>(props?: UseWatchProps<TFieldValues>) {\n  const { control, name, defaultValue } = props || {};\n  const methods = useFormContext();\n  const nameRef = React.useRef(name);\n  nameRef.current = name;\n\n  const { watchInternal, subjectsRef } = control || methods.control;\n  const [value, updateValue] = React.useState<unknown>(\n    isUndefined(defaultValue)\n      ? watchInternal(name as InternalFieldName)\n      : defaultValue,\n  );\n\n  React.useEffect(() => {\n    watchInternal(name as InternalFieldName);\n\n    const watchSubscription = subjectsRef.current.watch.subscribe({\n      next: ({ name: inputName, values }) =>\n        (!nameRef.current ||\n          !inputName ||\n          convertToArrayPayload(nameRef.current).some(\n            (fieldName) =>\n              inputName &&\n              fieldName &&\n              (fieldName.startsWith(inputName as InternalFieldName) ||\n                inputName.startsWith(fieldName as InternalFieldName)),\n          )) &&\n        updateValue(\n          watchInternal(\n            nameRef.current as string,\n            defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n            false,\n            values,\n          ),\n        ),\n    });\n\n    return () => watchSubscription.unsubscribe();\n  }, []);\n\n  return value;\n}\n"]},"metadata":{},"sourceType":"module"}