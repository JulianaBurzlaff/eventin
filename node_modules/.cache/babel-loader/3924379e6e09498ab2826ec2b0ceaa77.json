{"ast":null,"code":"var _jsxFileName = \"/Users/lucasbassetti/Dropbox/eventin/src/providers/UserProvider.jsx\";\nimport React, { createContext } from \"react\"; // import { useSnackbar } from \"notistack\";\n// import { api } from \"../services/api\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UserContext = /*#__PURE__*/createContext({});\nexport const UserProvider = ({\n  children\n}) => {\n  // const [user, setUser] = useState();\n  // const { enqueueSnackbar } = useSnackbar();\n  // const register = useCallback(async ({ fullName, username, password }) => {\n  //   try {\n  //     const { data } = await api.post(\"/users\", {\n  //       fullName,\n  //       username,\n  //       password,\n  //     });\n  //     setUser(data);\n  //     enqueueSnackbar(\"Usuário cadastrado com sucesso!\", {\n  //       variant: \"success\",\n  //     });\n  //   } catch (error) {\n  //     //\n  //   }\n  // }, []);\n  // const logout = useCallback(() => {\n  //   setUser();\n  // }, []);\n  // const login = useCallback(async ({ username, password }) => {\n  //   try {\n  //     const { data } = await api.get(\n  //       `/users?username=${username}&password=${password}`\n  //     );\n  //     const userData = data[0];\n  //     setUser(userData);\n  //     return userData;\n  //   } catch (error) {\n  //     return null;\n  //   }\n  // }, []);\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_c = UserProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"sources":["/Users/lucasbassetti/Dropbox/eventin/src/providers/UserProvider.jsx"],"names":["React","createContext","UserContext","UserProvider","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC,C,CACA;AACA;;;AAEA,OAAO,MAAMC,WAAW,gBAAGD,aAAa,CAAC,EAAD,CAAjC;AAEP,OAAO,MAAME,YAAY,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAC5C;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAA,cAQGA;AARH;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CAjDM;KAAMD,Y","sourcesContent":["import React, { createContext } from \"react\";\n// import { useSnackbar } from \"notistack\";\n// import { api } from \"../services/api\";\n\nexport const UserContext = createContext({});\n\nexport const UserProvider = ({ children }) => {\n  // const [user, setUser] = useState();\n  // const { enqueueSnackbar } = useSnackbar();\n\n  // const register = useCallback(async ({ fullName, username, password }) => {\n  //   try {\n  //     const { data } = await api.post(\"/users\", {\n  //       fullName,\n  //       username,\n  //       password,\n  //     });\n  //     setUser(data);\n  //     enqueueSnackbar(\"Usuário cadastrado com sucesso!\", {\n  //       variant: \"success\",\n  //     });\n  //   } catch (error) {\n  //     //\n  //   }\n  // }, []);\n\n  // const logout = useCallback(() => {\n  //   setUser();\n  // }, []);\n\n  // const login = useCallback(async ({ username, password }) => {\n  //   try {\n  //     const { data } = await api.get(\n  //       `/users?username=${username}&password=${password}`\n  //     );\n  //     const userData = data[0];\n  //     setUser(userData);\n  //     return userData;\n  //   } catch (error) {\n  //     return null;\n  //   }\n  // }, []);\n\n  return (\n    <UserContext.Provider\n    // value={{\n    //   user,\n    //   register,\n    //   logout,\n    //   login,\n    // }}\n    >\n      {children}\n    </UserContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}