{"ast":null,"code":"var _jsxFileName = \"/Users/lucasbassetti/Dropbox/eventin/src/providers/UserProvider.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useCallback, useState } from \"react\";\nimport { useSnackbar } from \"notistack\";\nimport { api } from \"../services/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UserContext = /*#__PURE__*/createContext({});\nexport const UserProvider = ({\n  children\n}) => {\n  _s();\n\n  const [user, setUser] = useState();\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  const register = useCallback(async ({\n    fullName,\n    username,\n    password\n  }) => {\n    try {\n      const {\n        data\n      } = await api.post(\"/users\", {\n        fullName,\n        username,\n        password\n      });\n      setUser(data);\n      enqueueSnackbar(\"Usuário cadastrado com sucesso!\", {\n        variant: \"success\"\n      });\n    } catch (error) {//\n    }\n  }, []);\n  const logout = useCallback(() => {\n    setUser();\n  }, []);\n  const login = useCallback(async ({\n    username,\n    password\n  }) => {\n    try {\n      const {\n        data\n      } = await api.get(`/users?username=${username}&password=${password}`);\n      const userData = data[0];\n      setUser(userData);\n      return userData;\n    } catch (error) {\n      return null;\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      user,\n      register,\n      logout,\n      login\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n\n_s(UserProvider, \"fk8vlECz5szo05cry0Yw5p6QVDo=\", false, function () {\n  return [useSnackbar];\n});\n\n_c = UserProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"sources":["/Users/lucasbassetti/Dropbox/eventin/src/providers/UserProvider.jsx"],"names":["React","createContext","useCallback","useState","useSnackbar","api","UserContext","UserProvider","children","user","setUser","enqueueSnackbar","register","fullName","username","password","data","post","variant","error","logout","login","get","userData"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,WAA/B,EAA4CC,QAA5C,QAA4D,OAA5D;AACA,SAASC,WAAT,QAA4B,WAA5B;AACA,SAASC,GAAT,QAAoB,iBAApB;;AAEA,OAAO,MAAMC,WAAW,gBAAGL,aAAa,CAAC,EAAD,CAAjC;AAEP,OAAO,MAAMM,YAAY,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AAC5C,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,EAAhC;AACA,QAAM;AAAEQ,IAAAA;AAAF,MAAsBP,WAAW,EAAvC;AAEA,QAAMQ,QAAQ,GAAGV,WAAW,CAAC,OAAO;AAAEW,IAAAA,QAAF;AAAYC,IAAAA,QAAZ;AAAsBC,IAAAA;AAAtB,GAAP,KAA4C;AACvE,QAAI;AACF,YAAM;AAAEC,QAAAA;AAAF,UAAW,MAAMX,GAAG,CAACY,IAAJ,CAAS,QAAT,EAAmB;AACxCJ,QAAAA,QADwC;AAExCC,QAAAA,QAFwC;AAGxCC,QAAAA;AAHwC,OAAnB,CAAvB;AAKAL,MAAAA,OAAO,CAACM,IAAD,CAAP;AACAL,MAAAA,eAAe,CAAC,iCAAD,EAAoC;AACjDO,QAAAA,OAAO,EAAE;AADwC,OAApC,CAAf;AAGD,KAVD,CAUE,OAAOC,KAAP,EAAc,CACd;AACD;AACF,GAd2B,EAczB,EAdyB,CAA5B;AAgBA,QAAMC,MAAM,GAAGlB,WAAW,CAAC,MAAM;AAC/BQ,IAAAA,OAAO;AACR,GAFyB,EAEvB,EAFuB,CAA1B;AAIA,QAAMW,KAAK,GAAGnB,WAAW,CAAC,OAAO;AAAEY,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAAP,KAAkC;AAC1D,QAAI;AACF,YAAM;AAAEC,QAAAA;AAAF,UAAW,MAAMX,GAAG,CAACiB,GAAJ,CACpB,mBAAkBR,QAAS,aAAYC,QAAS,EAD5B,CAAvB;AAGA,YAAMQ,QAAQ,GAAGP,IAAI,CAAC,CAAD,CAArB;AACAN,MAAAA,OAAO,CAACa,QAAD,CAAP;AACA,aAAOA,QAAP;AACD,KAPD,CAOE,OAAOJ,KAAP,EAAc;AACd,aAAO,IAAP;AACD;AACF,GAXwB,EAWtB,EAXsB,CAAzB;AAaA,sBACE,QAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE;AACLV,MAAAA,IADK;AAELG,MAAAA,QAFK;AAGLQ,MAAAA,MAHK;AAILC,MAAAA;AAJK,KADT;AAAA,cAQGb;AARH;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CAjDM;;GAAMD,Y;UAEiBH,W;;;KAFjBG,Y","sourcesContent":["import React, { createContext, useCallback, useState } from \"react\";\nimport { useSnackbar } from \"notistack\";\nimport { api } from \"../services/api\";\n\nexport const UserContext = createContext({});\n\nexport const UserProvider = ({ children }) => {\n  const [user, setUser] = useState();\n  const { enqueueSnackbar } = useSnackbar();\n\n  const register = useCallback(async ({ fullName, username, password }) => {\n    try {\n      const { data } = await api.post(\"/users\", {\n        fullName,\n        username,\n        password,\n      });\n      setUser(data);\n      enqueueSnackbar(\"Usuário cadastrado com sucesso!\", {\n        variant: \"success\",\n      });\n    } catch (error) {\n      //\n    }\n  }, []);\n\n  const logout = useCallback(() => {\n    setUser();\n  }, []);\n\n  const login = useCallback(async ({ username, password }) => {\n    try {\n      const { data } = await api.get(\n        `/users?username=${username}&password=${password}`\n      );\n      const userData = data[0];\n      setUser(userData);\n      return userData;\n    } catch (error) {\n      return null;\n    }\n  }, []);\n\n  return (\n    <UserContext.Provider\n      value={{\n        user,\n        register,\n        logout,\n        login,\n      }}\n    >\n      {children}\n    </UserContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}